cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = boolean()) {
templist <- list()
for (i in 1:length(iv.sav)){
val <- iv.sav[[i]]
formula_str <- paste0(dv.sav, "~", val, "+", ctrl.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
if (out.sav == T) {
return(templist)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav,
model.numbers = F
) %>%
return()
}
outputs <- f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = NULL, cov_label.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = T)
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "Voting-Eligible-Population Turnout Rate (Logged)",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = dv_label, cov_label.sav = cov_label,
star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.html"),
out.sav = F)
dv_label <- c("Model A", "Model B", "Model C", "Model D")
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "Voting-Eligible-Population Turnout Rate (Logged)",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = dv_label, cov_label.sav = cov_label,
star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.html"),
out.sav = F)
# install.packages("here")
# install.packages("tidyverse")
# install.packages("plm")
# install.packages("stargazer")
# install.packages("readxl")
# install.packages("labelled")
# install.packages("sjlabelled")
library(here)
library(tidyverse)
library(plm)
library(stargazer)
library(readxl)
library(labelled)
library(sjlabelled)
library(broom)
library(GGally)
### Change directory here.
### As long as file structure is same as github structure, directory does not need to be changed.
knitr::opts_knit$set(root.dir = here::here())
### Clean environment
rm(list=ls())
### Import data created in dataset-creation.rmd
df <- read_rds("04. Outputs/2024-10-09_electiondataset.rds")
### Legend of variables (variable name x explanation of each variable)
legend_df <- sjlabelled::get_label(df) %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename("label" = ".")
### Data without labels (if necessary)
df_nolabel <- labelled::remove_labels(df)
# basic R packages
library(here)
library(tidyverse)
library(readr)
library(dplyr)
# ggplot packages
library(ggplot2)
library(RColorBrewer)
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(showtext)
library(ggpmisc)
install.packages("ggpmisc")
# basic R packages
library(here)
library(tidyverse)
library(readr)
library(dplyr)
# ggplot packages
library(ggplot2)
library(RColorBrewer)
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(showtext)
library(ggpmisc)
sysfonts::font_add_google("Roboto Condensed")
showtext_auto()
# geospatial packages
library(maps)
library(usmap)
# regression / coefplot packages
library(plm)
library(broom)
library(dotwhisker)
### Change directory here.
### As long as file structure is same as github structure, directory does not need to be changed.
knitr::opts_knit$set(root.dir = here::here())
rm(list=ls())
### Import election dataset
df <- read_rds("04. Outputs/2024-10-09_electiondataset.rds")
legend <- df %>%
colnames() %>%
as.data.frame()
### Import factiva search data
IMPORT.factiva <- read.csv("04. Outputs/FactivaGerrymandering.csv", header = FALSE, stringsAsFactors = FALSE)
df_factiva <- IMPORT.factiva %>%
filter(grepl("Start Date", V1)) %>%
mutate(Year = as.numeric(gsub(".*(\\d{4}).*", "\\1", V1)),  # Extract the start year
Document_Count = as.numeric(V2)) %>% # Convert document count to numeric %>%
filter(!is.na(Year), !is.na(Document_Count)) # Remove rows with missing data (if any)
### Import regression p dataframe
p.df <- read_rds("04. Outputs/2024-10-13_regressionDF.rds")
df_factiva <- IMPORT.factiva %>%
filter(grepl("Start Date", V1)) %>%
mutate(Year = as.numeric(gsub(".*(\\d{4}).*", "\\1", V1)),  # Extract the start year
Document_Count = as.numeric(V2)) %>% # Convert document count to numeric %>%
filter(!is.na(Year), !is.na(Document_Count)) # Remove rows with missing data (if any)
### Import election dataset
df <- read_rds("04. Outputs/2024-10-09_electiondataset.rds")
pseries_1 <- df$vep_turnout_rate
pseries_2 <- df$vep_density
pseries_3 <- df$state_unemploymentRate
pseries_4 <- df$stateparty_control
pseries_5 <- df$lagged_vep
pseries_6 <- df$vote_closeness
pseries_df <- data.frame(pseries_1, pseries_2, pseries_3, pseries_4, pseries_5, pseries_6) %>%
na.omit()
cormatrix <- cor(pseries_df)
library(corrplot)
cormatrix <- cor(pseries_df)
pseries_1 <- df$vep_turnout_rate
pseries_2 <- df$vep_density
pseries_3 <- df$state_unemploymentRate
pseries_4 <- df$stateparty_control
pseries_5 <- df$lagged_vep
pseries_6 <- df$vote_closeness
pseries_df <- data.frame(pseries_1, pseries_2, pseries_3, pseries_4, pseries_5, pseries_6) %>%
na.omit()
cormatrix <- cor(pseries_df)
?cor()
class(df)
pseries_1 <- p.df$vep_turnout_rate
pseries_2 <- p.df$vep_density
pseries_3 <- p.df$state_unemploymentRate
pseries_4 <- p.df$stateparty_control
pseries_5 <- p.df$lagged_vep
pseries_6 <- p.df$vote_closeness
pseries_df <- data.frame(pseries_1, pseries_2, pseries_3, pseries_4, pseries_5, pseries_6) %>%
na.omit()
cormatrix <- cor(pseries_df)
pseries_df <- data.frame(pseries_1, pseries_2, pseries_3, pseries_4, pseries_5, pseries_6) %>%
na.omit()
View(pseries_df)
pseries_1 <- p.df$vep_turnout_rate
pseries_2 <- p.df$vep_density
pseries_3 <- p.df$state_unemploymentRate
pseries_5 <- p.df$lagged_vep
pseries_6 <- p.df$vote_closeness
pseries_df <- data.frame(pseries_1, pseries_2, pseries_3, pseries_5, pseries_6) %>%
na.omit()
cormatrix <- cor(pseries_df)
print(cormatrix)
corrplot(cormatrix, method = "circle")
vep_turnout_rate <- p.df$vep_turnout_rate
vep_density <- p.df$vep_density
state_unemploymentRate <- p.df$state_unemploymentRate
vote_closeness <- p.df$vote_closeness
pseries_df <- data.frame(vep_turnout_rate, vep_density, state_unemploymentRate, vote_closeness) %>%
na.omit()
cormatrix <- cor(pseries_df)
print(cormatrix)
corrplot(cormatrix, method = "circle")
vep_turnout_rate <- p.df$vep_turnout_rate
vep_density <- p.df$vep_density
state_unemploymentRate <- p.df$state_unemploymentRate
vote_closeness <- p.df$vote_closeness
pseries_df <- data.frame(vep_turnout_rate, vep_density, unemployment, vote_closeness) %>%
na.omit()
vep_turnout_rate <- p.df$vep_turnout_rate
vep_density <- p.df$vep_density
unemployment <- p.df$state_unemploymentRate
vote_closeness <- p.df$vote_closeness
pseries_df <- data.frame(vep_turnout_rate, vep_density, unemployment, vote_closeness) %>%
na.omit()
cormatrix <- cor(pseries_df)
print(cormatrix)
corrplot(cormatrix, method = "circle")
turnout_rate <- p.df$vep_turnout_rate
vep_density <- p.df$vep_density
unemployment <- p.df$state_unemploymentRate
vote_closeness <- p.df$vote_closeness
pseries_df <- data.frame(turnout_rate, vep_density, unemployment, vote_closeness) %>%
na.omit()
cormatrix <- cor(pseries_df)
print(cormatrix)
corrplot(cormatrix, method = "circle")
# Save visualization
f.ggsave(name = "CorPlot", width.sav = 12, height.sav = 8,
output.type = "jpg")
format <- theme_ipsum_rc(base_size = 30)+
theme(plot.title = element_text(size = 50, lineheight = 0.55),
plot.subtitle = element_text(size = 30, color = "#939198"),
axis.title.x = element_text(size = 30, hjust = 0.5),
axis.title.y = element_text(size = 30, hjust = 0.5),
axis.text = element_text(lineheight = 0.55),
legend.position = "none",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.caption = element_text(size = 30, hjust=0)
# axis.text.x = element_blank(),
# panel.background = element_blank()
)
format2 <- theme_ipsum_rc(base_size = 30)+
theme(plot.title = element_text(size = 50, lineheight = 0.55, hjust = 0.5),
plot.subtitle = element_text(size = 30, color = "#939198", hjust = 0.5),
axis.title.x = element_text(size = 30, hjust = 0.5),
axis.title.y = element_text(size = 30, hjust = 0.5),
axis.text = element_text(lineheight = 0.55),
plot.caption = element_text(size = 30, hjust=0),
legend.title = element_blank()
)
f.ggsave <- function(name = "asdf", width.sav = 16, height.sav = 9, dpi.sav = 150, output.type = "png"){
filepath <- paste0("05. Visualizations/", name, "_", today(), ".", output.type)
ggsave(filepath, width = width.sav, height = height.sav, units = "in", dpi = dpi.sav)
# print(filepath)
}
f.tidy.reg <- function(dv.sav = dv, iv.sav = iv, ctrl.sav = ctrl,
dataframe.sav = p.df,
effect.sav = "twoways",
model.sav = "within"){
formula_str <- paste0(dv.sav, "~", iv.sav, "+", ctrl.sav)
out <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav, effect = effect.sav, model = model.sav)
tidyout.coef <- tidy(out, conf.int = TRUE, conf.level = 0.9)
tidyout.fitted <- fitted(out)
tidyout.resid <- resid(out)
tidyout <- list(tidyout.coef, tidyout.fitted, tidyout.resid)
return(tidyout)
}
turnout_rate <- p.df$vep_turnout_rate
vep_density <- p.df$vep_density
unemployment <- p.df$state_unemploymentRate
vote_closeness <- p.df$vote_closeness
pseries_df <- data.frame(turnout_rate, vep_density, unemployment, vote_closeness) %>%
na.omit()
cormatrix <- cor(pseries_df)
print(cormatrix)
corrplot(cormatrix, method = "circle")
# Save visualization
f.ggsave(name = "CorPlot", width.sav = 12, height.sav = 8,
output.type = "jpg")
?corrplot()
### Setting variables
dv <- "log(vep_turnout_rate)"
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness)"
### Creating Tidy Data
tidyout_NONE <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_court_action_none_count", ctrl.sav = ctrl)[[1]] %>%
mutate(model_desc = "No court involvement",
model = "Model A")
tidyout_ANY <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary", ctrl.sav = ctrl)[[1]] %>%
mutate(model_desc = "ANY court involvement",
model = "Model B")
tidyout_UNFAIR <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary_unfair", ctrl.sav = ctrl)[[1]] %>%
mutate(model_desc = "Court finding: Unconstitutional map",
model = "Model C")
tidyout_FAIR <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary_fair", ctrl.sav = ctrl)[[1]] %>%
mutate(model_desc = "Court finding: Constitutional map",
model = "Model D")
### Join tidy data
all_models <- bind_rows(tidyout_NONE, tidyout_ANY, tidyout_UNFAIR, tidyout_FAIR) %>%
mutate(model = factor(model, levels = c("Model A", "Model B", "Model C", "Model D")))
### Creating residual data
resid_NONE <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_court_action_none_count", ctrl.sav = ctrl)[[3]] %>%
as.data.frame() %>%
mutate(model_desc = "No court involvement",
model = "Model A")
resid_ANY <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary", ctrl.sav = ctrl)[[3]] %>%
as.data.frame() %>%
mutate(model_desc = "ANY court involvement",
model = "Model B")
resid_UNFAIR <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary_unfair", ctrl.sav = ctrl)[[3]] %>%
as.data.frame() %>%
mutate(model_desc = "Court finding: Unconstitutional map",
model = "Model C")
resid_FAIR <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary_fair", ctrl.sav = ctrl)[[3]] %>%
as.data.frame() %>%
mutate(model_desc = "Court finding: Constitutional map",
model = "Model D")
### Join tidy data
all_resid <- bind_rows(resid_NONE, resid_ANY, resid_UNFAIR, resid_FAIR) %>%
mutate(model = factor(model, levels = c("Model A", "Model B", "Model C", "Model D"))) %>%
rename(resid = ".")
### Residual tests
ggplot(data = all_resid, aes(sample = resid)) +
geom_qq() +
stat_qq_line(col="red") +
facet_wrap(vars(model)) +
labs(title = "Q-Q Plots: Normality of Residuals for Each Model") +
theme_minimal()
res_test <- all_resid %>%
group_by(model) %>%
summarize(tidy(Box.test(resid, lag = 40, type = c("Box-Pierce", "Ljung-Box"))))
rest_test
res_test
ggplot(cleaned_data, aes(vep_turnout_rate)) +
geom_histogram()
all_resid
resid_FAIR
str(resid_FAIR)
# basic R packages
library(here)
library(tidyverse)
library(readr)
library(dplyr)
# ggplot packages
library(ggplot2)
library(RColorBrewer)
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(showtext)
library(ggpmisc)
sysfonts::font_add_google("Roboto Condensed")
showtext_auto()
# geospatial packages
library(maps)
library(usmap)
# regression / coefplot packages
library(plm)
library(broom)
library(dotwhisker)
### Change directory here.
### As long as file structure is same as github structure, directory does not need to be changed.
knitr::opts_knit$set(root.dir = here::here())
format <- theme_ipsum_rc(base_size = 30)+
theme(plot.title = element_text(size = 50, lineheight = 0.55),
plot.subtitle = element_text(size = 30, color = "#939198"),
axis.title.x = element_text(size = 30, hjust = 0.5),
axis.title.y = element_text(size = 30, hjust = 0.5),
axis.text = element_text(lineheight = 0.55),
legend.position = "none",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.caption = element_text(size = 30, hjust=0)
# axis.text.x = element_blank(),
# panel.background = element_blank()
)
format2 <- theme_ipsum_rc(base_size = 30)+
theme(plot.title = element_text(size = 50, lineheight = 0.55, hjust = 0.5),
plot.subtitle = element_text(size = 30, color = "#939198", hjust = 0.5),
axis.title.x = element_text(size = 30, hjust = 0.5),
axis.title.y = element_text(size = 30, hjust = 0.5),
axis.text = element_text(lineheight = 0.55),
plot.caption = element_text(size = 30, hjust=0),
legend.title = element_blank()
)
f.ggsave <- function(name = "asdf", width.sav = 16, height.sav = 9, dpi.sav = 150, output.type = "png"){
filepath <- paste0("05. Visualizations/", name, "_", today(), ".", output.type)
ggsave(filepath, width = width.sav, height = height.sav, units = "in", dpi = dpi.sav)
# print(filepath)
}
f.tidy.reg <- function(dv.sav = dv, iv.sav = iv, ctrl.sav = ctrl,
dataframe.sav = p.df,
effect.sav = "twoways",
model.sav = "within"){
formula_str <- paste0(dv.sav, "~", iv.sav, "+", ctrl.sav)
out <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav, effect = effect.sav, model = model.sav)
tidyout.coef <- tidy(out, conf.int = TRUE, conf.level = 0.9)
tidyout.fitted <- fitted(out)
tidyout.resid <- resid(out)
tidyout <- list(tidyout.coef, tidyout.fitted, tidyout.resid)
return(tidyout)
}
View(all_resid)
### Creating fitted data
fitted_NONE <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_court_action_none_count", ctrl.sav = ctrl)[[2]] %>%
as.data.frame() %>%
mutate(model_desc = "No court involvement",
model = "Model A")
fitted_ANY <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary", ctrl.sav = ctrl)[[2]] %>%
as.data.frame() %>%
mutate(model_desc = "ANY court involvement",
model = "Model B")
fitted_UNFAIR <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary_unfair", ctrl.sav = ctrl)[[2]] %>%
as.data.frame() %>%
mutate(model_desc = "Court finding: Unconstitutional map",
model = "Model C")
fitted_FAIR <- f.tidy.reg(dv.sav = dv, iv.sav = "interaction_judiciary_fair", ctrl.sav = ctrl)[[2]] %>%
as.data.frame() %>%
mutate(model_desc = "Court finding: Constitutional map",
model = "Model D")
### Join tidy data
all_fitted <- bind_rows(fitted_NONE, fitted_ANY, fitted_UNFAIR, fitted_FAIR) %>%
mutate(model = factor(model, levels = c("Model A", "Model B", "Model C", "Model D"))) %>%
rename(fitted = ".")
View(all_fitted)
### Merge residual and fitted data
all_resxfit <- all_resid %>%
cbind(all_fitted$fitted)
View(all_resxfit)
### Merge residual and fitted data
all_resxfit <- all_resid %>%
cbind(fitted = all_fitted$fitted)
ggplot(data = all_resxfit, aes(x = fitted, y = resid)) +
geom_point() +
geom_hline(yintercept = 0) +
facet_wrap(vars(model)) +
labs(title = "Residual Plots: Heteroscedasticity Test for Each Model") +
theme_minimal()
ggplot(data = all_resxfit, aes(x = fitted, y = resid)) +
geom_point() +
geom_hline(yintercept = 0) +
facet_wrap(vars(model)) +
labs(title = "Residual Plots: Heteroscedasticity Test for Each Model",
x='Fitted Values', y='Residuals') +
theme_minimal()
ggplot(data = all_resxfit, aes(x = resid)) +
geom_density() +
facet_wrap(vars(model)) +
labs(title = "Residual Plots: Density",
x='Residuals') +
theme_minimal()
ggplot(data = all_resxfit, aes(x = resid)) +
geom_density() +
facet_wrap(vars(model)) +
labs(title = "Residual Plots: Density",
x='Residuals', y = "Density") +
theme_minimal()
View(f.ggsave)
### Residual tests
ggplot(data = all_resid, aes(sample = resid)) +
geom_qq() +
stat_qq_line(col="red") +
facet_wrap(vars(model)) +
labs(title = "Q-Q Plots: Normality of Residuals for Each Model") +
theme_minimal()
f.ggsave(name = "QQ Plots",
width.sav = 12,
height.sav = 8,
output.type = "jpg")
ggplot(data = all_resxfit, aes(x = fitted, y = resid)) +
geom_point() +
geom_hline(yintercept = 0) +
facet_wrap(vars(model)) +
labs(title = "Residual Plots: Heteroscedasticity Test for Each Model",
x='Fitted Values', y='Residuals') +
theme_minimal()
f.ggsave(name = "Residual Plots_H-test",
width.sav = 12,
height.sav = 8,
output.type = "jpg")
f.ggsave(name = "Residual Plots_Density",
width.sav = 12,
height.sav = 8,
output.type = "jpg")
ggplot(data = all_resxfit, aes(x = resid)) +
geom_density() +
facet_wrap(vars(model)) +
labs(title = "Residual Plots: Density",
x='Residuals', y = "Density") +
theme_minimal()
f.ggsave(name = "Residual Plots_Density",
width.sav = 12,
height.sav = 8,
output.type = "jpg")
View(f.tidy.reg)
