grepl(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
sub(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
grepl(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})"), unlist(strsplit(df_unemp$countyName_StateAbbreviation)[2]), "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation)[2]), "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation))[2], "DC"))
?strsplit
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
na.omit()
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
unlist(strsplit("asdf", ", "))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"),
county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
?ungroup
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, " County, "))[1])
?gsub
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
gsub(" County", "", county_name)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
gsub(" County", "", county_name)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
gsub(" County", "",.)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
```
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
df4$county_name <- gsub(" County", "", df4$county_name)
df4$county_name
?%in%
library(here)
library(tidyverse)
library(plm)
library(stargazer)
library(readxl)
library(stringi)
### Change directory here. Keep file structure same as sharepoint structure.
knitr::opts_knit$set(root.dir = here::here())
### Clean workspace
rm(list=ls())
### Import voter turnout data
### https://election.lab.ufl.edu/dataset/1980-2022-general-election-turnout-rates/
df_turnout <- read_csv("02. Inputs/Turnout_1980_2022_v1.0.csv")
### Preparing dataframe for merging
df1 <- df_turnout %>%
# Changing percent string to numeric
mutate(across(c(NONCITIZEN_PCT, VEP_TURNOUT_RATE, VAP_TURNOUT_RATE), ~as.numeric(sub("%", "", .)))) %>%
# Removing columns unrelated to voter turnout rate
select(1:3, VEP_TURNOUT_RATE, VAP_TURNOUT_RATE) %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower)
### Import "votes for each presidential candidate"
### https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/VOQCHQ
df_candivote <- read_csv("02. Inputs/countypres_2000-2020.csv")
### Preparing dataframe for merging
df2_1 <- df_candivote %>%
# Only considering Democrat, Republican, and Other (ignoring Green, Libertarian, etc)
mutate(party_n = case_when(party == "DEMOCRAT" ~ "Democrat",
party == "REPUBLICAN" ~ "Republican",
TRUE ~ "Other")) %>%
group_by(year, state, county_name, office, party_n) %>%
summarize(county_partyvotes = sum(candidatevotes),
.groups = "drop") %>%
# Changing state and county names from all caps to sentence caps
mutate_at(c("state", "county_name"), ~str_to_sentence(.)) %>%
# Redundancy check, narrowing to only U.S. Presidential elections
filter(office == "US PRESIDENT") %>%
select(-office) %>%
# Find county level total votes
group_by(year, state, county_name) %>%
mutate(county_totalvotes = sum(county_partyvotes)) %>%
# Pivot to wide data format
mutate(party = paste0(party_n,"_county_vote")) %>%
select(-party_n) %>%
pivot_wider(names_from = party,
values_from = county_partyvotes) %>%
# Reorder variables
relocate(Republican_county_vote, .after = Democrat_county_vote) %>%
relocate(county_totalvotes, .after = Other_county_vote) %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower) %>%
# Getting state level totals
group_by(year, state) %>%
mutate(state_totalvotes = sum(county_totalvotes))
# Extracting state abbreviations
df2_2 <- df_candivote %>%
select(state, state_po) %>%
mutate(state = str_to_sentence(state)) %>%
rename(state_abv = state_po) %>%
group_by(state) %>%
unique()
### Merging back state abbreviations
df2 <- left_join(df2_1, df2_2, by = "state") %>%
relocate(state_abv, .after = state)
### Import state crime rate
### https://corgis-edu.github.io/corgis/csv/state_crime/
df_crime <- read_csv("02. Inputs/state_crime.csv")
### Preparing dataframe for merging
df3 <- df_crime %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower) %>%
# Renaming column names to "crime" for easier indexing
rename_with(~ gsub("data","statecrime",.), contains("data")) %>%
# Merging state abbreviations
mutate(state = str_to_sentence(state)) %>%
left_join(df2_2, by = "state") %>%
relocate(state_abv, .after = state)
### Import redistricting data
### https://redistricting.lls.edu/national-overview/?colorby=Plan%20Status&level=Congress&cycle=2020
df_redist <- read_csv("02. Inputs/StatesAndCyclesData_production-20240301a.csv")
df4_1 <- df_redist %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower) %>%
# Extracting the year the redistricting plan was passed
mutate(pass_year = substr(passed, start = 1, stop = 4)) %>%
# Dropping entries without such information
drop_na(pass_year) %>%
### ADJUST!!!
# Filters that need to be adjusted
# filter(level == "State Lower") %>%
# filter(pass_year <= 2020) %>%
###
select(state, pass_year, level, `party control`, `drawn by`)
df4_2 <- df4_1 %>%
group_by(state) %>%
summarize(n = n(),
min_year = min(pass_year),
max_year = max(pass_year)) %>%
arrange(desc(n))
### Source county unemployment rate from the following link:
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row binding all annual county unemployment data from 1997 to 2003
# Collate files' paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
# Remove NA (Note: there are data entry of "N.A." in character)
na.omit()
# Rename columns
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
### Preparing data frame for merging
df5 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
### Source Polling Station Data from the following linK:
### https://github.com/PublicI/us-polling-places/tree/update-2020
### Row bind all the county-level polling station data
# Collate all files path
poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
# Filter for only polling station data
poll_files <- c()
for (file in poll_files_all){
if(grepl("/output/", file)){
poll_files <- append(poll_files, file)
}
}
df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print(file)
print(ncol(file_data))
}
}
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct()
df5 %>% head()
df6 %>% head()
df3 %>% head()
df5 %>%
head()
df5 %>%
head()
### Merge dataframes
# Df2 is primary, because it has county level and state level
df_merge <- df2 %>%
left_join(df1 %>%  select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df3 %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
mutate(idkey = paste0(state_abv,"_", county_name)) %>%
relocate(idkey, .before = 1)
df_merge %>%
head()
df5 %>%
head()
df5 %>%
mutate(
# ,
# county_name = "",
state_abv = substr(countyName_StateAbbreviation, start = -2, stop = -1))
df5 %>%
head()
?gsub()
?str_remove()
df5 %>%
mutate(county_name_edit = str_remove(county_name, " County"))
df5_2 <- df5 %>%
mutate(county_name_edit = str_remove(county_name, " County"))
df5_2
### Preparing data frame for merging
df5 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = str_remove(unlist(strsplit(countyName_StateAbbreviation, ", "))[1]), " County")
### Preparing data frame for merging
df5 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = str_remove(unlist(strsplit(countyName_StateAbbreviation, ", "))[1], " County"))
View(df5)
###
df5_2 <- df5 %>%
str()
###
df5_2 <- df5 %>%
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate)
df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
View()
### Merge dataframes
# Df2 is primary, because it has county level and state level
df_merge1 <- df2 %>%
left_join(df1 %>%  select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df3 %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
mutate(idkey = paste0(state_abv,"_", county_name)) %>%
relocate(idkey, .before = 1)
df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
View()
df_merge1 %>% str()
df5_2 %>% str()
###
df5_2 <- df5 %>%
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
mutate(year = as.numeric(year))
### Preparing data frame for merging
df5 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = str_remove(unlist(strsplit(countyName_StateAbbreviation, ", "))[1], " County")) %>%
ungroup()
###
df5_2 <- df5 %>%
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
mutate(year = as.numeric(year))
### Merge dataframes
# Df2 is primary, because it has county level and state level
df_merge1 <- df2 %>%
left_join(df1 %>%  select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df3 %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
mutate(idkey = paste0(state_abv,"_", county_name)) %>%
relocate(idkey, .before = 1)
df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
View()
View(df5_2)
df_unemp %>% View()
df5 %>% View()
df_merge1 %>% View()
### Preparing data frame for merging
df5 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = str_remove(unlist(strsplit(countyName_StateAbbreviation, ", "))[1], " County")) %>%
ungroup()
View(df5)
###
df5_2 <- df5 %>%
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
mutate(year = as.numeric(year))
View(df5_2)
### Merge dataframes
# Df2 is primary, because it has county level and state level
df_merge1 <- df2 %>%
left_join(df1 %>%  select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df3 %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
mutate(idkey = paste0(state_abv,"_", county_name)) %>%
relocate(idkey, .before = 1)
df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
View()
########
df5_2 %>%
select(year, state_abv, county_name) %>%
arrange(year, state_abv, county_name)
df_merge1 %>%
select(year, state_abv, county_name) %>%
arrange(year, state_abv, county_name)
########
df5_2 %>%
select(year, state_abv, county_name) %>%
arrange(year, state_abv, county_name)
View(df5)
### Merge dataframes
# Df2 is primary, because it has county level and state level
df_merge1 <- df2 %>%
left_join(df1 %>%  select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df3 %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
mutate(idkey = paste0(state_abv,"_", county_name)) %>%
relocate(idkey, .before = 1)
df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
View()
df_merge2 <- df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name"))
sum(if.na(df_merge2$unemploymentRate))
sum(is.na(df_merge2$unemploymentRate))
sum(is.na(df_merge2$laborForce))
sum(!is.na(df_merge2$laborForce))
df6 %>% View()
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct() %>%
mutate(election_year = substr(election_date, start = 1, stop = 4))
View(df6)
df_merge2 <- df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
left_join(df6, by = join_by("year" == "election_year", "county_name" == "county_name"))
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct() %>%
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4)))
df_merge2 <- df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
left_join(df6, by = join_by("year" == "election_year", "county_name" == "county_name"))
