}
f.reg.multi.iv <- function(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = NULL) {
templist <- list()
for (i in 1:length(iv.sav)){
val <- iv.sav[[i]]
formula_str <- paste0(dv.sav, "~", val, "+", ctrl.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
out.sav <- templist %>%
return()
}
dv <- "log(vep_turnout_rate)"
iv <- c("interaction_judiciary", "interaction_court_action_none_count", "interaction_judiciary_unfair", "interaction_court_challenge_rejected_count", "interaction_judiciary_fair")
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness)"
outputs <- list()
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = NULL, cov_label.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = outputs)
### Creating a function to run multiple regressions simultaneously
f.reg.multi <- function(dv.sav = dv,
iv.sav = iv,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL) {
templist <- list()
for (i in 1:length(dv.sav)){
val <- dv.sav[[i]]
formula_str <- paste0(val, "~", iv.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return()
}
f.reg.multi.iv <- function(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = NULL) {
templist <- list()
for (i in 1:length(iv.sav)){
val <- iv.sav[[i]]
formula_str <- paste0(dv.sav, "~", val, "+", ctrl.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
outputs <- templist
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return()
}
dv <- "log(vep_turnout_rate)"
iv <- c("interaction_judiciary", "interaction_court_action_none_count", "interaction_judiciary_unfair", "interaction_court_challenge_rejected_count", "interaction_judiciary_fair")
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness)"
outputs <- list()
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = NULL, cov_label.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = outputs)
a <- list("1", "2")
b <- a
rm(a, b)
outputs <- f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = NULL, cov_label.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = outputs)
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return(list(., templist))
### Creating a function to run multiple regressions simultaneously
f.reg.multi <- function(dv.sav = dv,
iv.sav = iv,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL) {
templist <- list()
for (i in 1:length(dv.sav)){
val <- dv.sav[[i]]
formula_str <- paste0(val, "~", iv.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return()
}
f.reg.multi.iv <- function(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = boolean()) {
templist <- list()
for (i in 1:length(iv.sav)){
val <- iv.sav[[i]]
formula_str <- paste0(dv.sav, "~", val, "+", ctrl.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
if (out.sav == T) {
return(templist)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return()
}
dv <- "log(vep_turnout_rate)"
iv <- c("interaction_judiciary", "interaction_court_action_none_count", "interaction_judiciary_unfair", "interaction_court_challenge_rejected_count", "interaction_judiciary_fair")
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness)"
outputs <- list()
outputs <- f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = NULL, cov_label.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = T)
View(outputs)
?broom
library(broom)
?broom
out.df <- tidy(outputs)
out.df <- c()
for (i in 1:length(out.df)){
out.df <- rbind(out.df, outputs[[i]])
}
outputs[[1]]
out.df <- rbind(out.df, tidy(outputs[[i]]))
for (i in 1:length(out.df)){
out.df <- rbind(out.df, tidy(outputs[[i]]))
}
out.df <- rbind(out.df, t(tidy(outputs[[i]])))
for (i in 1:length(out.df)){
out.df <- rbind(out.df, t(tidy(outputs[[i]])))
}
test <- tidy(outputs[[1]])
View(test)
test <- tidy(outputs[[2]])
test <- tidy(outputs[[3]])
out.df <- rbind(out.df, test)
out.df <- data.frame(ncol = 5)
View(out.df)
out.df <- data.frame()
test <- tidy(outputs[[3]])
out.df <- rbind(out.df, test)
out.df <- data.frame()
for (i in 1:length(out.df)){
out.df <- rbind(out.df, tidy(outputs[[i]]))
}
for (i in 1:length(outputs)){
out.df <- rbind(out.df, tidy(outputs[[i]]))
}
View(out.df)
for (i in 1:length(outputs)){
temp <- tidy(outputs[[i]]) %>%
mutate(model = str(i))
out.df <- rbind(out.df, temp)
}
?str()
for (i in 1:length(outputs)){
temp <- outputs[[i]] %>%
tidy() %>%
mutate(model = i)
out.df <- rbind(out.df, temp)
}
temp <- outputs[[1]] %>%
tidy() %>%
mutate(model = 1)
View(temp)
out.df <- data.frame()
for (i in 1:length(outputs)){
temp <- outputs[[i]] %>%
tidy() %>%
mutate(model = i)
out.df <- rbind(out.df, temp)
}
library(coefplot)
coefplot(out.df[model == 1], sort = "magnitude", intercept = FALSE)
coefplot(out.df[out.df$model == 1], sort = "magnitude", intercept = FALSE)
out.df[out.df$model == 1]
?coefplot
o1 <- out.df %>%
filter(model == 1) %>%
coefplot(sort = magnitude, intercept = FALSE)
?coefplot.data.frame
for (i in 1:length(outputs)){
temp <- outputs[[i]] %>%
tidy() %>%
mutate(model = i)
coefplot(temp)
out.df <- rbind(out.df, temp)
}
for (i in 1:length(outputs)){
temp <- outputs[[i]] %>%
tidy() %>%
mutate(model = i)
coefplot(temp)
out.df <- rbind(out.df, temp)
}
out.df <- data.frame()
for (i in 1:length(outputs)){
temp <- outputs[[i]] %>%
tidy() %>%
mutate(model = i)
out.df <- rbind(out.df, temp)
}
View(outputs)
View(out.df)
?plm
library(ggcoef)
install.packages(ggcoef)
install.packages("ggcoef")
library(ggcoef)
install.packages("ggcoef")
install.packages("GGally")
library(GGally)
?ggcoef
ggcoef(out.df)
ggcoef(out.df, exponentiate = T)
m1 <- out.df %>%
filter(model == 1)
ggcoef(m1, exponentiate = T)
ggcoef(m1)
ggcoef(m1, conf.int = T)
ggcoef(m1, conf.int = T, conf.level = 0.95)
ggcoef(m1,
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
errorbar_color = "red",
errorbar_height = 2,
errorbar_size = 2)
ggcoef(outputs[[1]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
errorbar_color = "red",
errorbar_height = 2,
errorbar_size = 2)
ggcoef(outputs[[1]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
)
length(outputs)
for (i in 1:length(outputs)){
ggcoef(outputs[[i]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
)
}
m1 <- ggcoef(outputs[[2]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
)
m1 <- ggcoef(outputs[[1]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
)
m1 <- ggcoef(outputs[[1]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
exponentiate = F
)
m1 <- ggcoef(outputs[[1]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[1]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
for (i in 1:length(outputs)){
ggcoef(outputs[[i]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T,
)
}
m1 <- ggcoef(outputs[[2]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[2]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[3]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[4]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[5]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[1:5]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[5]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[5]],
conf.int = T,
conf.level = 0.90,
exclude_intercept = T
)
ggcoef(outputs[[5]],
conf.int = T,
conf.level = 0.99,
exclude_intercept = T
)
ggcoef(outputs[[5]],
conf.int = T,
conf.level = 0.95,
exclude_intercept = T
)
ggcoef(outputs[[5]],
conf.int = T,
conf.level = 0.90,
exclude_intercept = T
)
ggcoef(outputs[[4]],
conf.int = T,
conf.level = 0.90,
exclude_intercept = T
)
