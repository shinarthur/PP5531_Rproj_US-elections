mutate(county_name_edit = str_remove_all(county_name, countyexpressions)) %>%
%>%
df5 %>%
mutate(county_name_edit = str_remove_all(county_name, countyexpressions)) %>%
View()
df5_2 <- df5 %>%
mutate(county_name_edit = str_remove_all(county_name, countyexpressions)) %>%
select(year, state_abv, county_name_edit, laborForce, employed, unemployed, unemploymentRate) %>%
mutate(year = as.numeric(year))
df_merge2 <- df_merge1 %>%
left_join(df5_2, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name_edit")) %>%
View()
df5_2 %>% filter(state_abv == "KS")
df5 %>% filter(state_abv == "KS")
### Preparing data frame for merging
df5 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup()
### Preparing data frame for merging
df5 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
countyexpressions <- c(" Borough/municipality" = "",  " Borough/city" = "", " County/city" = "", " County" = "", " Census Area"  = "", " Borough" = "", "/" = "")
df5_2 <- df5 %>%
mutate(county_name_edit = str_remove_all(county_name, countyexpressions)) %>%
select(year, state_abv, county_name_edit, laborForce, employed, unemployed, unemploymentRate) %>%
mutate(year = as.numeric(year))
df5_2 %>% filter(state_abv == "KS")
df5 %>% filter(state_abv == "KS")
df5 %>% filter(state_abv == "KS") %>% View()
### [Arthur version] Preparing data frame for merging
df_unemp %>% str()
df_unemp %>% filter(countyName_StateAbbreviation) %>% unique()
unique(df_unemp$countyName_StateAbbreviation)
View()
unique(df_unemp$countyName_StateAbbreviation) %>% View()
.
unique(df_unemp$countyName_StateAbbreviation) %>% as.data.frame() %>% View()
df_merge1 %>% View()
unique(df_unemp$countyName_StateAbbreviation) %>% as.data.frame() %>% View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = case_when(countyName_StateAbbreviation == "District of Columbia" ~ "DC",
substr(countyName_StateAbbreviation, start = -2, stop = -1)),
county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))) %>%
View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = case_when(countyName_StateAbbreviation == "District of Columbia" ~ "DC",
TRUE ~ substr(countyName_StateAbbreviation, start = -2, stop = -1)),
county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))) %>%
View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = case_when(countyName_StateAbbreviation == "District of Columbia" ~ "DC",
TRUE ~ substr(countyName_StateAbbreviation, start = -2, stop = -1))
# ,
# county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))
) %>%
View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = case_when(countyName_StateAbbreviation == "District of Columbia" ~ "DC",
. ~ substr(countyName_StateAbbreviation, start = -2, stop = -1))
# ,
# county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))
) %>%
View()
substr(countyName_StateAbbreviation, start = -2, stop = -1)
# ,
# county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))
%>%
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = substr(countyName_StateAbbreviation, start = -2, stop = -1)
# ,
# county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))
) %>%
View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation))
# ,
# county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))
) %>%
View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = case_when(countyName_StateAbbreviation == "District of Columbia" ~ "DC",
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))
# ,
# county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))
) %>%
View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = case_when(
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation))),
county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))) %>%
View()
### [Arthur version] Preparing data frame for merging
df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
mutate(state_abv = case_when(
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation))),
county_name = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv))) %>%
mutate(county_name_edit = str_remove_all(county_name, countyexpressions)) %>%
View()
### [Arthur version] Preparing data frame for merging
df5 <- df_unemp %>%
# Extracting state abbreviations
mutate(state_abv = case_when(
# District of Columbia manually labelled as "DC"
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
# Extracting the abbreviation from the last two letters of the countyName_StateAbbreviation string
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))) %>%
# Extracting county name
mutate(county_name.temp1 = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv)),
# Harmonizing county name by removing expressions in `countryexpressions`
county_name.temp2 = str_remove_all(county_name, countyexpressions),
# Harmonizing county names by changing to sentence case
county_name = str_to_sentence(county_name.temp2)) %>%
# Selecting relevant columns only
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
# Changing structure of year for merging
mutate(year = as.numeric(year))
### [Arthur version] Preparing data frame for merging
df5 <- df_unemp %>%
# Extracting state abbreviations
mutate(state_abv = case_when(
# District of Columbia manually labelled as "DC"
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
# Extracting the abbreviation from the last two letters of the countyName_StateAbbreviation string
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))) %>%
# Extracting county name
mutate(county_name.temp1 = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv)),
# Harmonizing county name by removing expressions in `countryexpressions`
county_name.temp2 = str_remove_all(county_name.temp1, countyexpressions),
# Harmonizing county names by changing to sentence case
county_name = str_to_sentence(county_name.temp2)) %>%
# Selecting relevant columns only
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
# Changing structure of year for merging
mutate(year = as.numeric(year))
df_merge2 <- df_merge1 %>%
left_join(df5, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
View()
df_merge2 <- df_merge1 %>%
left_join(df5, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
left_join(df6, by = join_by("year" == "election_year", "county_name" == "county_name"))
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct() %>%
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4)))
### Source Polling Station Data from the following linK:
### https://github.com/PublicI/us-polling-places/tree/update-2020
### Row bind all the county-level polling station data
# Collate all files path
poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
# Filter for only polling station data
poll_files <- c()
for (file in poll_files_all){
if(grepl("/output/", file)){
poll_files <- append(poll_files, file)
}
}
df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print(file)
print(ncol(file_data))
}
}
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct() %>%
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4)))
sum(is.na(df_merge2$unemploy))
df_merge2 <- df_merge1 %>%
left_join(df5, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
left_join(df6, by = join_by("year" == "election_year", "county_name" == "county_name"))
df_merge2 %>% str()
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct() %>%
# Extract only election year
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4))) %>%
select(-election_date)
df6
View(df_poll)
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Extract election year & harmonize to numeric
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4))) %>%
# Tally by election year for each county
group_by(election_year, county_name) %>%
summarize(polling_station = n())
View(df6)
df_merge2 <- df_merge1 %>%
left_join(df5, by = join_by("year" == "year", "state_abv" == "state_abv", "county_name" == "county_name")) %>%
left_join(df6, by = join_by("year" == "election_year", "county_name" == "county_name"))
### Save dataset
write.csv(df_merge, file = paste0("04. Outputs/", today(), "_electiondataset.csv"))
### Save dataset
write.csv(df_merge2, file = paste0("04. Outputs/", today(), "_electiondataset.csv"))
library(here)
library(tidyverse)
library(plm)
library(stargazer)
library(readxl)
library(stringi)
### Change directory here. Keep file structure same as sharepoint structure.
knitr::opts_knit$set(root.dir = here::here())
### Source county unemployment rate from the following link:
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row binding all annual county unemployment data from 1997 to 2003
# Collate files' paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
# Remove NA (Note: there are data entry of "N.A." in character)
na.omit()
# Rename columns
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
countyexpressions <- c(" Borough/municipality" = "",  " Borough/city" = "", " County/city" = "", " County" = "", " Census Area"  = "", " Borough" = "", "/" = "")
### [Arthur version] Preparing data frame for merging
df5 <- df_unemp %>%
# Extracting state abbreviations
mutate(state_abv = case_when(
# District of Columbia manually labelled as "DC"
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
# Extracting the abbreviation from the last two letters of the countyName_StateAbbreviation string
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))) %>%
# Extracting county name
mutate(county_name.temp1 = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv)),
# Harmonizing county name by removing expressions in `countryexpressions`
county_name.temp2 = str_remove_all(county_name.temp1, countyexpressions),
# Harmonizing county names by changing to sentence case
county_name = str_to_sentence(county_name.temp2)) %>%
# Selecting relevant columns only
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
# Changing structure of year for merging
mutate(year = as.numeric(year))
### Source county unemployment rate from the following link:
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row binding all annual county unemployment data from 1997 to 2003
# Collate files' paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
# Remove NA (Note: there are data entry of "N.A." in character)
na.omit()
# Rename columns
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
countyexpressions <- c(" Borough/municipality" = "",  " Borough/city" = "", " County/city" = "", " County" = "", " Census Area"  = "", " Borough" = "", "/" = "")
### [Arthur version] Preparing data frame for merging
df5 <- df_unemp %>%
# Extracting state abbreviations
mutate(state_abv = case_when(
# District of Columbia manually labelled as "DC"
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
# Extracting the abbreviation from the last two letters of the countyName_StateAbbreviation string
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))) %>%
# Extracting county name
mutate(county_name.temp1 = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv)),
# Harmonizing county name by removing expressions in `countryexpressions`
county_name.temp2 = str_remove_all(county_name.temp1, countyexpressions),
# Harmonizing county names by changing to sentence case
county_name = str_to_sentence(county_name.temp2)) %>%
# Selecting relevant columns only
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
# Changing structure of year for merging
mutate(year = as.numeric(year))
### Source county unemployment rate from the following link:
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row binding all annual county unemployment data from 1997 to 2003
# Collate files' paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
# Remove NA (Note: there are data entry of "N.A." in character)
na.omit()
# Rename columns
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
countyexpressions <- c(" Borough/municipality" = "",  " Borough/city" = "", " County/city" = "", " County" = "", " Census Area"  = "", " Borough" = "", "/" = "")
### [Arthur version] Preparing data frame for merging
df5 <- df_unemp %>%
# Extracting state abbreviations
mutate(state_abv = case_when(
# District of Columbia manually labelled as "DC"
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
# Extracting the abbreviation from the last two letters of the countyName_StateAbbreviation string
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))) %>%
# Extracting county name
mutate(county_name.temp1 = str_remove_all(countyName_StateAbbreviation, paste0(", ", state_abv)),
# Harmonizing county name by removing expressions in `countryexpressions`
county_name.temp2 = str_remove_all(county_name.temp1, countyexpressions),
# Harmonizing county names by changing to sentence case
county_name = str_to_sentence(county_name.temp2)) %>%
# Selecting relevant columns only
select(year, state_abv, county_name, laborForce, employed, unemployed, unemploymentRate) %>%
# Changing structure of year for merging
mutate(year = as.numeric(year))
head(poll_files)
tail(poll_files)
?grep
?strsplit
strsplit(poll_files[1], "[:punct:]")
strsplit(poll_files[1], "\b[:punct:]\b")
strsplit(poll_files[1], "[:punct:]")
strsplit(poll_files[1], "/[a-zA-Z]_")
strsplit(poll_files[1], "/")
strsplit(poll_files[2], "/")
strsplit(poll_files[5], "/")
strsplit(poll_files[5], "/")[4]
unlist(strsplit(poll_files[5], "/"))[4]
# Collate all files path
poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
# Filter for only polling station data
poll_files <- c()
for (file in poll_files_all){
if(grepl("/output/", file)){
poll_files <- append(poll_files, file)
}
}
df_poll <- data.frame(matrix(ncol = 16, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Append state name from file path
state <- unlist(strsplit(file, "/"))[4]
file_data$state <- str_to_sentence(state)
# Safety check for same number of columns before binding
if (ncol(file_data) == 16){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print(file)
print(ncol(file_data))
}
}
file_data <- read.csv(poll_files[1])
state <- unlist(strsplit(poll_files[1], "/"))[4]
head(poll_files[1])
View(file_data)
### Source Polling Station Data from the following linK:
### https://github.com/PublicI/us-polling-places/tree/update-2020
### Row bind all the county-level polling station data
# Collate all files path
poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
# Filter for only polling station data
poll_files <- c()
for (file in poll_files_all){
if(grepl("/output/", file)){
poll_files <- append(poll_files, file)
}
}
df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Append state name from file path
# state <- unlist(strsplit(file, "/"))[4]
# file_data$state <- str_to_sentence(state)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print(file)
print(ncol(file_data))
}
}
### Prepare data frame for merge
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Extract election year & harmonize to numeric
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4))) %>%
# Tally by election year for each county
group_by(election_year, county_name) %>%
summarize(polling_station = n())
