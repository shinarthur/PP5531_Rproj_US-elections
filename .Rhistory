rename_all(tolower) %>%
# Renaming column names to "crime" for easier indexing
rename_with(~ gsub("data","statecrime",.), contains("data"))
# Extract statenames from df_crime and df_base to check if names are identical
df_crime_statename.temp <- df_crime %>% select(state) %>% distinct() %>% arrange() %>% mutate(x = 1)
df_base_statename.temp <- base_df %>% select(state_name) %>% distinct() %>% arrange() %>% mutate(y = 1)
full_join(df_crime_statename.temp, df_base_statename.temp, by = join_by("state" == "state_name")) %>%
filter(is.na(x) | is.na(y))
### Source county unemployment rate from the following link:
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row binding all annual county unemployment data from 1997 to 2003
# Collate files' paths
# unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
#
# # Prepare empty data frame to catch
# df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
#
# # Loop each file into binding
# for (file in unemp_county_files) {
#   # Read xslx file
#   file_data <- read_xlsx(file)
#   # Remove headers and unnecessary columns to match to empty data frame
#   file_slice <- file_data[-c(1:5),-c(1,6)] %>%
#     # Remove NA (Note: there are data entry of "N.A." in character)
#     na.omit()
#   # Rename columns
#   names(file_slice) <- c("state_code",
#                          "county_code",
#                          "countyName_StateAbbreviation",
#                          "year",
#                          "laborForce",
#                          "employed",
#                          "unemployed",
#                          "unemploymentRate")
#   # Rbind
#   df_unemp <- rbind(df_unemp, file_slice)
# }
#
# # Save df_unemp as an intermediary file
# saveRDS(df_unemp, file = paste0("03. Intermediaries/df_unemp.rds"))
# Reimport df_unemp
df_unemp <- read_rds("03. Intermediaries/df_unemp.rds")
### Preparing data frame for merge
df_unemp_state.temp1 <- df_unemp %>%
# Extracting state abbreviations
mutate(state_abv = case_when(
# District of Columbia manually labelled as "DC"
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
# Extracting the abbreviation from the last two letters of the countyName_StateAbbreviation string
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))) %>%
# Selecting relevant columns only
select(year, state_abv, laborForce, employed, unemployed, unemploymentRate) %>%
# Change NA string to null values
mutate_all(~na_if(., "N.A.")) %>%
# Changing variable to numeric
mutate(across(c("year", "laborForce", "employed", "unemployed", "unemploymentRate"
), ~as.numeric(.)))
# State aggregated data
df_unemp_state.temp2 <- df_unemp_state.temp1 %>%
group_by(year, state_abv) %>%
summarize(state_laborForce = sum(laborForce, na.rm = T),
state_employed = sum(employed, na.rm = T),
state_unemployed = sum(unemployed, na.rm = T),
state_unemploymentRate = mean(unemploymentRate, na.rm = T))
df_unemp_state <- df_unemp_state.temp2
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Source Polling Station Data from the following linK:
### https://github.com/PublicI/us-polling-places/tree/update-2020
### Row bind all the county-level polling station data
# # Collate all files path
# poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
#
# # Filter for only polling station data
# poll_files <- c()
# for (file in poll_files_all){
#   if(grepl("/output/", file)){
#     poll_files <- append(poll_files, file)
#   }
# }
#
# df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
#
# # Loop each file into binding
# for (file in poll_files) {
#   # Read csv file
#   file_data <- read.csv(file)
#   # Append state name from file path
#   # state <- unlist(strsplit(file, "/"))[4]
#   # file_data$state <- str_to_sentence(state)
#   # Safety check for same number of columns before binding
#   if (ncol(file_data) == 15){
#     # Rbind
#     df_poll <- rbind(df_poll, file_data)
#   }
#   else{
#     print(file)
#     print(ncol(file_data))
#   }
# }
#
# # Save df_poll as an intermediary file
# saveRDS(df_poll, file = paste0("03. Intermediaries/df_poll.rds"))
# Reimport df_poll
df_poll <- read_rds("03. Intermediaries/df_poll.rds")
### Prepare data frame for merge
df_poll_state <- df_poll %>%
# replace county name with "non-county" value when county name is NA or empty
mutate(county_name = if_else((county_name == "" | is.na(county_name)), "non-county", county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Extract election year & harmonize to numeric
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4))) %>%
# filter out jurisdiction with no names (they are likely precincts)
# filter(jurisdiction != "") %>%
# Tally by election year for each state
group_by(election_year, state) %>%
summarize(polling_station = n())
df_house %>% str()
df_housevote %>% str()
### Merge dataframes
df_final <- base_redist_df %>%
left_join(df_housevote, by = join_by("year" == "year", "state_abv" == "state_po")) %>%
left_join(df_turnout %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_poll_state, by = join_by("year" == "election_year", "state_abv" == "state")) %>%
left_join(df_unemp_state, by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_crime, by = join_by("year" == "year", "state_name" == "state"))
View(df_final)
View(df_housevote)
### Merge dataframes
df_final <- base_redist_df %>%
left_join(df_housevote, by = join_by("year" == "year", "state_abv" == "state_po")) %>%
left_join(df_turnout %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_poll_state, by = join_by("year" == "election_year", "state_abv" == "state")) %>%
left_join(df_unemp_state, by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_crime, by = join_by("year" == "year", "state_name" == "state"))
### Save dataset
# write.csv(df_final, file = paste0("04. Outputs/", today(), "_electiondataset.csv"))
saveRDS(df_final, file = paste0("04. Outputs/", today(), "_electiondataset.rds"))
rm(list=ls())
df <- read_rds("04. Outputs/2024-10-03_electiondataset.rds")
View(df)
### Import house votes
### https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2
IMPORT.housevote <- read_csv("02. Inputs/1976-2022-house.csv")
### Preparing dataframe for merging
df_housevote.temp1 <- IMPORT.housevote %>%
# Only considering Democrat, Republican candidates. Other parties are classified as "OTHER".
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
# Creating wide dataframe
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
# Merging back total votes per district
left_join(IMPORT.housevote %>% select(year, state_po, district, totalvotes) %>% distinct(),
by = join_by("year" == "year", "state_po" == "state_po", "district" == "district")) %>%
# Replacing missing values with 0 (missing values caused by the pivot_wider)
replace(is.na(.), 0) %>%
# Relocating columns to more appropriate locations
relocate(totalvotes, .after = district) %>%
relocate(OTHER, .after = REP) %>%
# Filtering states with total votes <= 1 (which indicate no contestation or NA values)
filter(totalvotes >= 1) %>%
# Converting votes per party into percentage of votes cast per district
mutate(across(c("DEM", "REP", "OTHER"), ~ ./totalvotes , .names = '{col}_perc'))
# Identifying average percentage of votes cast for a party in a state (average across districts)
df_housevote.temp2 <- df_housevote.temp1 %>%
group_by(year, state_po) %>%
summarize(avg_DEMvote_perc = mean(DEM_perc, na.rm = T),
avg_REPvote_perc = mean(REP_perc, na.rm = T),
avg_OTHERvote_perc = mean(OTHER_perc, na.rm = T),
state_totalvotes = sum(totalvotes, na.rm = T),
state_totalvotes2 = mean(totalvotes, na.rm = T))
df_housevote <- df_housevote.temp2
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
View(df_housevote)
### Import house votes
### https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2
IMPORT.housevote <- read_csv("02. Inputs/1976-2022-house.csv")
### Preparing dataframe for merging
df_housevote.temp1 <- IMPORT.housevote %>%
# Only considering Democrat, Republican candidates. Other parties are classified as "OTHER".
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
# Creating wide dataframe
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
# Merging back total votes per district
left_join(IMPORT.housevote %>% select(year, state_po, district, totalvotes) %>% distinct(),
by = join_by("year" == "year", "state_po" == "state_po", "district" == "district")) %>%
# Replacing missing values with 0 (missing values caused by the pivot_wider)
replace(is.na(.), 0) %>%
# Relocating columns to more appropriate locations
relocate(totalvotes, .after = district) %>%
relocate(OTHER, .after = REP) %>%
# Filtering states with total votes <= 1 (which indicate no contestation or NA values)
filter(totalvotes >= 1) %>%
# Converting votes per party into percentage of votes cast per district
mutate(across(c("DEM", "REP", "OTHER"), ~ ./totalvotes , .names = '{col}_perc'))
# Identifying average percentage of votes cast for a party in a state (average across districts)
df_housevote.temp2 <- df_housevote.temp1 %>%
group_by(year, state_po) %>%
summarize(avg_DEMvote_perc = mean(DEM_perc, na.rm = T),
avg_REPvote_perc = mean(REP_perc, na.rm = T),
avg_OTHERvote_perc = mean(OTHER_perc, na.rm = T),
state_totalvotes = sum(totalvotes, na.rm = T),
state_totalvotes2 = mean(totalvotes, na.rm = T))
View(df_housevote.temp2)
View(df_housevote.temp1)
# Identifying average percentage of votes cast for a party in a state (average across districts)
df_housevote.temp2 <- df_housevote.temp1 %>%
group_by(year, state_po) %>%
summarize(avg_DEMvote_perc = mean(DEM_perc, na.rm = T),
avg_REPvote_perc = mean(REP_perc, na.rm = T),
avg_OTHERvote_perc = mean(OTHER_perc, na.rm = T),
state_totalvotes = sum(totalvotes, na.rm = T))
df_housevote <- df_housevote.temp2
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
# install.packages("usa")
library(here)
library(tidyverse)
library(stringi)
library(usa)
### Change directory here.
### As long as file structure is same as github structure, directory does not need to be changed.
knitr::opts_knit$set(root.dir = here::here())
### Function to create a base dataframe
f.create.basedf <- function(df, start_year, end_year){
electionyears <- c() # Empty dataframe to collect election years vector
temp.list <- list() # Empty list to nest year-added dataframes into
for(val in start_year:end_year){
# Narrow down election years (years that are divisible by 4)
if(val %% 4 == 0) {
electionyears <- c(electionyears, val)
}
}
# Create year-added dataframes with U.S. state data
for(i in 1:length(electionyears)){
val <- electionyears[[i]]
temp.df <- df %>%
mutate(year = val) %>%
relocate(year, .before = 1)
# Save data into a nested list
temp.list[[i]] <- temp.df
}
# Bind the rows of the nested list into the final base dataframe
return(bind_rows(temp.list))
}
base_df <- f.create.basedf(usa::states, 2000, 2020) %>%
rename(state_name = name,
state_abv = abb)
### Import redistricting data
### https://redistricting.lls.edu/national-overview/?colorby=Plan%20Status&level=Congress&cycle=2020
IMPORT.redist <- read_csv("02. Inputs/StatesAndCyclesData_production-20240301a.csv")
### Preparing dataframe for merging
df_redist.temp1 <- IMPORT.redist %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower) %>%
# Extracting the year the redistricting plan was passed
mutate(pass_year = as.numeric(substr(passed, start = 1, stop = 4))) %>%
# Dropping entries without such information
drop_na(pass_year) %>%
# New year variable based on election cycle
mutate(elect_year = case_when(
(pass_year > 1996 & pass_year <= 2000) ~ 2000,
(pass_year > 2000 & pass_year <= 2004) ~ 2004,
(pass_year > 2004 & pass_year <= 2008) ~ 2008,
(pass_year > 2008 & pass_year <= 2012) ~ 2012,
(pass_year > 2012 & pass_year <= 2016) ~ 2016,
(pass_year > 2016 & pass_year <= 2020) ~ 2020,
(pass_year > 2020 & pass_year <= 2024) ~ 2024
)) %>%
# Filter to congressional redistricting
filter(level == "Congress") %>%
select(state, elect_year, `court action`)
# Editing data for redistricting & court actions
df_redist.temp2 <- df_redist.temp1 %>%
# Add a "no redistricting" variable
mutate(`court action` = if_else(is.na(`court action`), "court_action_none", `court action`)) %>%
# Lower case entries for harmonization
mutate(`court action` = tolower(`court action`)) %>%
# Count the number of instances per court action category
group_by(state, elect_year, `court action`) %>%
summarize(n = n(), .groups = "drop") %>%
# Change to wider dataframe
pivot_wider(names_from = `court action`,
values_from = n)
# Check if all-NAs exist
df_redist.temp2 %>%
filter(is.na(`court_action_none`) & is.na(`rejected challenge to leg. map`)
& is.na(`court drew map (not legislature)`) & is.na(`court sent map back to legislature`)
& is.na(`pending litigation`) & is.na(`rejected challenge to commission map`)) %>%
str()
# Consolidate court actions
df_redist.temp3 <- df_redist.temp2 %>%
replace(is.na(.), 0) %>%
mutate(court_challenge_rejected = `rejected challenge to leg. map` + `rejected challenge to commission map`) %>%
select(-`rejected challenge to leg. map`, -`rejected challenge to commission map`, -`pending litigation`) %>%
rename(court_map_drawn_count = `court drew map (not legislature)`,
court_return_leg_count = `court sent map back to legislature`,
court_action_none_count = court_action_none,
court_challenge_rejected_count = court_challenge_rejected
)
### Merge redistricting data with
base_redist_df <- left_join(base_df, df_redist.temp3,
by = join_by("year" == "elect_year", "state_abv" == "state")) %>%
mutate(across(starts_with("court_"), ~ coalesce(., 0))) %>%
mutate(redistrict_VAR = case_when(court_action_none_count > 0 | court_map_drawn_count > 0 | court_return_leg_count > 0 | court_challenge_rejected_count > 0 ~ 1,
TRUE ~ 0)) %>%
relocate(redistrict_VAR, .before = court_action_none_count)
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Import house votes
### https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2
IMPORT.housevote <- read_csv("02. Inputs/1976-2022-house.csv")
### Preparing dataframe for merging
df_housevote.temp1 <- IMPORT.housevote %>%
# Only considering Democrat, Republican candidates. Other parties are classified as "OTHER".
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
# Creating wide dataframe
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
# Merging back total votes per district
left_join(IMPORT.housevote %>% select(year, state_po, district, totalvotes) %>% distinct(),
by = join_by("year" == "year", "state_po" == "state_po", "district" == "district")) %>%
# Replacing missing values with 0 (missing values caused by the pivot_wider)
replace(is.na(.), 0) %>%
# Relocating columns to more appropriate locations
relocate(totalvotes, .after = district) %>%
relocate(OTHER, .after = REP) %>%
# Filtering states with total votes <= 1 (which indicate no contestation or NA values)
filter(totalvotes >= 1) %>%
# Converting votes per party into percentage of votes cast per district
mutate(across(c("DEM", "REP", "OTHER"), ~ ./totalvotes , .names = '{col}_perc'))
# Identifying average percentage of votes cast for a party in a state (average across districts)
df_housevote.temp2 <- df_housevote.temp1 %>%
group_by(year, state_po) %>%
summarize(avg_DEMvote_perc = mean(DEM_perc, na.rm = T),
avg_REPvote_perc = mean(REP_perc, na.rm = T),
avg_OTHERvote_perc = mean(OTHER_perc, na.rm = T),
state_totalvotes = sum(totalvotes, na.rm = T))
df_housevote <- df_housevote.temp2
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Import voter turnout data
### https://election.lab.ufl.edu/dataset/1980-2022-general-election-turnout-rates/
IMPORT.turnout <- read_csv("02. Inputs/Turnout_1980_2022_v1.0.csv")
### Preparing dataframe for merging
df_turnout <- IMPORT.turnout %>%
# Changing percent string to numeric
mutate(across(c(NONCITIZEN_PCT, VEP_TURNOUT_RATE, VAP_TURNOUT_RATE), ~as.numeric(sub("%", "", .)))) %>%
# Removing columns unrelated to voter turnout rate
select(1:3, VEP_TURNOUT_RATE, VAP_TURNOUT_RATE, VEP, VAP) %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower)
### Import state crime rate
### https://corgis-edu.github.io/corgis/csv/state_crime/
IMPORT.crime <- read_csv("02. Inputs/state_crime.csv")
### Preparing dataframe for merging
df_crime <- IMPORT.crime %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower) %>%
# Renaming column names to "crime" for easier indexing
rename_with(~ gsub("data","statecrime",.), contains("data"))
# Extract statenames from df_crime and df_base to check if names are identical
df_crime_statename.temp <- df_crime %>% select(state) %>% distinct() %>% arrange() %>% mutate(x = 1)
df_base_statename.temp <- base_df %>% select(state_name) %>% distinct() %>% arrange() %>% mutate(y = 1)
full_join(df_crime_statename.temp, df_base_statename.temp, by = join_by("state" == "state_name")) %>%
filter(is.na(x) | is.na(y))
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Source county unemployment rate from the following link:
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row binding all annual county unemployment data from 1997 to 2003
# Collate files' paths
# unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
#
# # Prepare empty data frame to catch
# df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
#
# # Loop each file into binding
# for (file in unemp_county_files) {
#   # Read xslx file
#   file_data <- read_xlsx(file)
#   # Remove headers and unnecessary columns to match to empty data frame
#   file_slice <- file_data[-c(1:5),-c(1,6)] %>%
#     # Remove NA (Note: there are data entry of "N.A." in character)
#     na.omit()
#   # Rename columns
#   names(file_slice) <- c("state_code",
#                          "county_code",
#                          "countyName_StateAbbreviation",
#                          "year",
#                          "laborForce",
#                          "employed",
#                          "unemployed",
#                          "unemploymentRate")
#   # Rbind
#   df_unemp <- rbind(df_unemp, file_slice)
# }
#
# # Save df_unemp as an intermediary file
# saveRDS(df_unemp, file = paste0("03. Intermediaries/df_unemp.rds"))
# Reimport df_unemp
df_unemp <- read_rds("03. Intermediaries/df_unemp.rds")
### Preparing data frame for merge
df_unemp_state.temp1 <- df_unemp %>%
# Extracting state abbreviations
mutate(state_abv = case_when(
# District of Columbia manually labelled as "DC"
countyName_StateAbbreviation == "District of Columbia" ~ "DC",
# Extracting the abbreviation from the last two letters of the countyName_StateAbbreviation string
TRUE ~ substr(countyName_StateAbbreviation, start = nchar(countyName_StateAbbreviation)-1, stop = nchar(countyName_StateAbbreviation)))) %>%
# Selecting relevant columns only
select(year, state_abv, laborForce, employed, unemployed, unemploymentRate) %>%
# Change NA string to null values
mutate_all(~na_if(., "N.A.")) %>%
# Changing variable to numeric
mutate(across(c("year", "laborForce", "employed", "unemployed", "unemploymentRate"
), ~as.numeric(.)))
# State aggregated data
df_unemp_state.temp2 <- df_unemp_state.temp1 %>%
group_by(year, state_abv) %>%
summarize(state_laborForce = sum(laborForce, na.rm = T),
state_employed = sum(employed, na.rm = T),
state_unemployed = sum(unemployed, na.rm = T),
state_unemploymentRate = mean(unemploymentRate, na.rm = T))
df_unemp_state <- df_unemp_state.temp2
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Source Polling Station Data from the following linK:
### https://github.com/PublicI/us-polling-places/tree/update-2020
### Row bind all the county-level polling station data
# # Collate all files path
# poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
#
# # Filter for only polling station data
# poll_files <- c()
# for (file in poll_files_all){
#   if(grepl("/output/", file)){
#     poll_files <- append(poll_files, file)
#   }
# }
#
# df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
#
# # Loop each file into binding
# for (file in poll_files) {
#   # Read csv file
#   file_data <- read.csv(file)
#   # Append state name from file path
#   # state <- unlist(strsplit(file, "/"))[4]
#   # file_data$state <- str_to_sentence(state)
#   # Safety check for same number of columns before binding
#   if (ncol(file_data) == 15){
#     # Rbind
#     df_poll <- rbind(df_poll, file_data)
#   }
#   else{
#     print(file)
#     print(ncol(file_data))
#   }
# }
#
# # Save df_poll as an intermediary file
# saveRDS(df_poll, file = paste0("03. Intermediaries/df_poll.rds"))
# Reimport df_poll
df_poll <- read_rds("03. Intermediaries/df_poll.rds")
### Prepare data frame for merge
df_poll_state <- df_poll %>%
# replace county name with "non-county" value when county name is NA or empty
mutate(county_name = if_else((county_name == "" | is.na(county_name)), "non-county", county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Extract election year & harmonize to numeric
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4))) %>%
# filter out jurisdiction with no names (they are likely precincts)
# filter(jurisdiction != "") %>%
# Tally by election year for each state
group_by(election_year, state) %>%
summarize(polling_station = n())
### Merge dataframes
df_final <- base_redist_df %>%
left_join(df_housevote, by = join_by("year" == "year", "state_abv" == "state_po")) %>%
left_join(df_turnout %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_poll_state, by = join_by("year" == "election_year", "state_abv" == "state")) %>%
left_join(df_unemp_state, by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_crime, by = join_by("year" == "year", "state_name" == "state"))
### Save dataset
# write.csv(df_final, file = paste0("04. Outputs/", today(), "_electiondataset.csv"))
saveRDS(df_final, file = paste0("04. Outputs/", today(), "_electiondataset.rds"))
rm(list=ls())
df <- read_rds("04. Outputs/2024-10-03_electiondataset.rds")
View(df)
