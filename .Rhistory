unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'Labor Force' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read.xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)]
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'Labor Force' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)]
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
View(df_unemp)
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'Labor Force' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit()
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
?where?
?where
where(is.na.data.frame(df_unemp))
where(is.na(df_unemp))
which(is.na.data.frame(df_unemp))
which(is.na(df_unemp))
?na.omit
?na.pass
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'Labor Force' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit()
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
?rbind
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'Labor Force' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit()
# Rbind
df_unemp <- rbind(df_unemp, file_slice, make.row.names = FALSE)
}
?setNames
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'Labor Force' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit() %>%
unname()
# Rbind
df_unemp <- rbind(df_unemp, file_slice, make.row.names = FALSE)
}
unname(test)
unname(test, force = TRUE)
names(test) <- c("CountyName_StateAbbreviation",
"Year",
"LaborForce",
"Employed",
"Unemployed",
"UnemploymentRate")
View(test)
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'LaborForce' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit() %>%
names() <- c("CountyName_StateAbbreviation",
"Year",
"LaborForce",
"Employed",
"Unemployed",
"UnemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'LaborForce' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit() %>%
names(.) <- c("CountyName_StateAbbreviation",
"Year",
"LaborForce",
"Employed",
"Unemployed",
"UnemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame('CountyName_StateAbbreviation' = character(),
'Year' = integer(),
'LaborForce' = integer(),
'Employed' = integer(),
'Unemployed' = integer(),
'UnemploymentRate' = double(),
stringsAsFactors = FALSE)
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit()
names(file_slice) <- c("CountyName_StateAbbreviation",
"Year",
"LaborForce",
"Employed",
"Unemployed",
"UnemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
str(df_unemp)
summary(df_unemp)
df_unemp[3218:3220,]
is.na.data.frame(df_unemp)
which(is.na.data.frame(df_unemp), arr.ind = TRUE)
which(is.na.data.frame(df_unemp))
?grepl
View(df_candivote)
View(df1)
grep("[A-Z]{2}")
grep("[A-Z]{2}", df_unemp$CountyName_StateAbbreviation)
df_unemp$CountyName_StateAbbreviation[-c(1)]
library(stringr)
?substr
substr(df_unemp$CountyName_StateAbbreviation, -2,-1)
substr(df_unemp$CountyName_StateAbbreviation, -3,-1)
substr(df_unemp$CountyName_StateAbbreviation, -3)
substr(df_unemp$CountyName_StateAbbreviation, -3, -1)
substr(df_unemp$CountyName_StateAbbreviation, -4, -1)
# Prepare empty data frame to catch
df_unemp <- data.frame(ncol = 6, nrow = 0)
View(df_unemp)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 6, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit()
names(file_slice) <- c("CountyName_StateAbbreviation",
"Year",
"LaborForce",
"Employed",
"Unemployed",
"UnemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
### Preparing data frame for merging
df4 <- df_unemp %>%
mutate(state_abv = substr(-2,-1))
### Preparing data frame for merging
df4 <- df_unemp %>%
select(CountyName_StateAbbreviation) %>%
mutate(state_abv = substr(-2,-1))
### Preparing data frame for merging
df4 <- df_unemp %>%
select(CountyName_StateAbbreviation) %>%
mutate(state_abv = substr(.,-2,-1))
View(df4)
### Preparing data frame for merging
df4 <- df_unemp %>%
mutate(state_abv = substr(CountyName_StateAbbreviation,-2,-1))
substr(df_unemp$CountyName_StateAbbreviation[1], -2, -1)
substr(df_unemp$CountyName_StateAbbreviation[1], -5, -1)
substr(df_unemp$CountyName_StateAbbreviation[1], 1, 2)
substr(df_unemp$CountyName_StateAbbreviation[1], -10, 2)
substr(df_unemp$CountyName_StateAbbreviation[1], -10, -1)
substring(df_unemp$CountyName_StateAbbreviation[1], -2, -1)
substring(df_unemp$CountyName_StateAbbreviation[1], -10, -1)
library(stringi)
?stri_sub
stri_sub(df_unemp$CountyName_StateAbbreviation[1], -2, -1)
### Preparing data frame for merging
df4 <- df_unemp %>%
mutate(state_abv = stri_sub(CountyName_StateAbbreviation,-2,-1))
?regex
strsplit(df_unemp$CountyName_StateAbbreviation, ",")
strsplit(df_unemp$CountyName_StateAbbreviation[1], ",")
strsplit(df_unemp$CountyName_StateAbbreviation[1], ",")[2]
strsplit(df_unemp$CountyName_StateAbbreviation[1], ",")[[1]][2]
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = strsplit(CountyName_StateAbbreviation, ", ")[[1]][1],
state_abv = strsplit(CountyName_StateAbbreviation, ", ")[[1]][2])
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = strsplit(CountyName_StateAbbreviation, ", ")[[1]][1],
state_abv = strsplit(CountyName_StateAbbreviation, ", ")[[1]][2]) %>%
select(-'countyName_StateAbbreviation')
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = strsplit(CountyName_StateAbbreviation, ", ")[[1]][1],
state_abv = strsplit(CountyName_StateAbbreviation, ", ")[[1]][2]) %>%
select(-countyName_StateAbbreviation)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = strsplit(CountyName_StateAbbreviation, ", ")[[1]][1],
state_abv = strsplit(CountyName_StateAbbreviation, ", ")[[1]][2])
strsplit(df_unemp$CountyName_StateAbbreviation[1], ", ")
?unlist
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = unlist(strsplit(CountyName_StateAbbreviation, ", "))[1],
state_abv = unlist(strsplit(CountyName_StateAbbreviation, ", "))[2])
unlist(strsplit(CountyName_StateAbbreviation, ", "))
unlist(strsplit(df_unemp$countyName_StateAbbreviation, ", "))
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 6, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit()
names(file_slice) <- c("countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1],
state_abv = unlist(strsplit(countyName_StateAbbreviation, ", "))[2])
unlist(strsplit(df_unemp$countyName_StateAbbreviation, ", "))
?grep
grep(",\\s(A-Z]{2}")
grep(",\\s(A-Z]{2}", df_unemp$countyName_StateAbbreviation[1])
grep(",\s(A-Z]{2}", df_unemp$countyName_StateAbbreviation[1])
grep(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
grepl(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
sub(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
grepl(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})"), unlist(strsplit(df_unemp$countyName_StateAbbreviation)[2]), "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation)[2]), "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation))[2], "DC"))
?strsplit
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
na.omit()
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
unlist(strsplit("asdf", ", "))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"),
county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
?ungroup
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, " County, "))[1])
?gsub
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
gsub(" County", "", county_name)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
gsub(" County", "", county_name)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
gsub(" County", "",.)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
```
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
df4$county_name <- gsub(" County", "", df4$county_name)
df4$county_name
?%in%
