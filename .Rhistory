df_unemp_state <- df_unemp_state.temp2
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Source Polling Station Data from the following linK:
### https://github.com/PublicI/us-polling-places/tree/update-2020
### Row bind all the county-level polling station data
# # Collate all files path
# poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
#
# # Filter for only polling station data
# poll_files <- c()
# for (file in poll_files_all){
#   if(grepl("/output/", file)){
#     poll_files <- append(poll_files, file)
#   }
# }
#
# df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
#
# # Loop each file into binding
# for (file in poll_files) {
#   # Read csv file
#   file_data <- read.csv(file)
#   # Append state name from file path
#   # state <- unlist(strsplit(file, "/"))[4]
#   # file_data$state <- str_to_sentence(state)
#   # Safety check for same number of columns before binding
#   if (ncol(file_data) == 15){
#     # Rbind
#     df_poll <- rbind(df_poll, file_data)
#   }
#   else{
#     print(file)
#     print(ncol(file_data))
#   }
# }
#
# # Save df_poll as an intermediary file
# saveRDS(df_poll, file = paste0("03. Intermediaries/df_poll.rds"))
# Reimport df_poll
df_poll <- read_rds("03. Intermediaries/df_poll.rds")
### Prepare data frame for merge
df_poll_state <- df_poll %>%
# replace county name with "non-county" value when county name is NA or empty
mutate(county_name = if_else((county_name == "" | is.na(county_name)), "non-county", county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Extract election year & harmonize to numeric
mutate(election_year = as.numeric(substr(election_date, start = 1, stop = 4))) %>%
# filter out jurisdiction with no names (they are likely precincts)
# filter(jurisdiction != "") %>%
# Tally by election year for each state
group_by(election_year, state) %>%
summarize(polling_station = n())
### Import state GDP
### https://www.bea.gov/data/gdp/gdp-state
IMPORT.gdp <- read_csv("02. Inputs/SAGDP1__ALL_AREAS_1997_2023.csv")
### Preparing dataframe for merging
df_gdp <- IMPORT.gdp %>%
select(-`2021`, -`2022`, -`2023`) %>%
# Harmonize FIPS code
mutate(GeoFIPS = substr(GeoFIPS, start = 1, stop = 2)) %>%
# Extract only Real GDP
filter(LineCode == 1) %>%
select(GeoFIPS, `1997`:`2020`) %>%
pivot_longer(cols = !1,
names_to = "year",
values_to = "gdp_state") %>%
mutate(year = as.numeric(year))
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Import state-level wealth inequality
### https://www.openicpsr.org/openicpsr/project/192306/version/V4/view?path=/openicpsr/192306/fcr:versions/V4&type=project
IMPORT.wealth_ineq <- read_csv("02. Inputs/wealth inequality/state_wealth_inequality.csv")
### Preparing dataframe for merging
df_wealth_inequality <- IMPORT.wealth_ineq %>%
mutate(state = str_to_sentence(state)) %>%
mutate(state = case_when(state == "District of columbia" ~ "District of Columbia",
TRUE ~ .)) %>%
select(year, state, wealth_gini, income_mean)
### Preparing dataframe for merging
df_wealth_inequality <- IMPORT.wealth_ineq %>%
mutate(state = str_to_sentence(state)) %>%
mutate(state = case_when(state == "District of columbia" ~ "District of Columbia",
TRUE ~ state)) %>%
select(year, state, wealth_gini, income_mean)
### Import state partisan composition (state controlled by which party?)
### https://github.com/psthomas/state-partisan-composition
### (originally from https://www.ncsl.org/research/about-state-legislatures/partisan-composition.aspx)
IMPORT.stateparty <- read_csv("02. Inputs/state_partisan_composition_1934_2021.csv")
### Preparing dataframe for merging
df_stateparty <- IMPORT.stateparty %>%
# Filter out any NA values (that are not represented as NA)
filter(!house_total == 0) %>%
filter(!senate_total == 0) %>%
# Identify which party has control over state senate
mutate(senate_party = case_when(senate_dem/senate_total >= 0.5 ~ "DEM",
senate_rep/senate_total >= 0.5 ~ "REP",
is.na(senate_total) | is.na(senate_dem) | is.na(senate_rep) ~ NA,
TRUE ~ "SPLIT")) %>%
relocate(senate_party, .before = senate_total) %>%
# Identify which party has control over state house of representatives
mutate(house_party = case_when(house_dem/house_total >= 0.5 ~ "DEM",
house_rep/house_total >= 0.5 ~ "REP",
is.na(house_total) | is.na(house_dem) | is.na(house_rep) ~ NA,
TRUE ~ "SPLIT")) %>%
relocate(house_party, .before = house_total) %>%
# Identify state legislative control - do they control both senate and house?)
mutate(stateparty_control = case_when(house_party == senate_party ~ house_party,
!house_party == senate_party ~ "SPLIT",
is.na(house_party) | is.na(senate_party) ~ NA,
TRUE ~ NA)) %>%
select(year, state, stateparty_control) %>%
# Change to factor
mutate(stateparty_control = as.factor(stateparty_control))
### Merge dataframes
df_merge <- base_redist_df %>%
left_join(df_housevote, by = join_by("year" == "year", "state_abv" == "state_po")) %>%
left_join(df_turnout %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_poll_state, by = join_by("year" == "election_year", "state_abv" == "state")) %>%
left_join(df_unemp_state, by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
# left_join(df_crime, by = join_by("year" == "year", "state_name" == "state")) %>%
left_join(df_fbi_crime, by = join_by("year" == "year", "state_name" == "state")) %>%
left_join(df_gdp, by = join_by("year" == "year", "fips" == "GeoFIPS")) %>%
left_join(df_wealth_inequality, by = join_by("year" == "year", "state_name" == "state")) %>%
left_join(df_stateparty, by = join_by("year" == "year", "state_name" == "state"))
### Merge dataframes
df_merge <- base_redist_df %>%
left_join(df_housevote, by = join_by("year" == "year", "state_abv" == "state_po")) %>%
left_join(df_turnout %>% select(-state), by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_poll_state, by = join_by("year" == "election_year", "state_abv" == "state")) %>%
left_join(df_unemp_state, by = join_by("year" == "year", "state_abv" == "state_abv")) %>%
left_join(df_fbi_crime, by = join_by("year" == "year", "state_name" == "state")) %>%
left_join(df_gdp, by = join_by("year" == "year", "fips" == "GeoFIPS")) %>%
left_join(df_wealth_inequality, by = join_by("year" == "year", "state_name" == "state")) %>%
left_join(df_stateparty, by = join_by("year" == "year", "state_name" == "state"))
### Add population density
df_final.temp1 <- df_merge %>%
mutate(vep_density = vep / area,
vap_density = vap / area)
### Creating Binary Treatment Variables
# Court action status in 2012 (Treatment variable)
treatedVAR.2012.temp <- df_final.temp1 %>%
mutate(year_num = as.numeric(year)) %>%
filter(year_num == 2012) %>%
select(state_abv, redistrict_VAR, court_action_none_count, court_map_drawn_count, court_return_leg_count, court_challenge_rejected_count) %>%
rename_all(~paste0(., "_VAR")) %>%
mutate(judiciary_VAR = case_when(redistrict_VAR_VAR == 1
& (court_map_drawn_count_VAR == 1
| court_return_leg_count_VAR == 1
| court_challenge_rejected_count_VAR == 1) ~ 1,
TRUE ~ 0),
judiciary_unfair_map_VAR = case_when(redistrict_VAR_VAR == 1
& (court_map_drawn_count_VAR == 1
| court_return_leg_count_VAR == 1) ~ 1,
TRUE ~ 0),
judiciary_fair_map_VAR = case_when(redistrict_VAR_VAR == 1
& court_challenge_rejected_count_VAR == 1 ~ 1,
TRUE ~ 0)
)
# Left join court action status to all years
df_final.temp2 <- df_final.temp1 %>%
mutate(year_num = as.numeric(year)) %>%
left_join(treatedVAR.2012.temp, by = join_by("state_abv" == "state_abv_VAR"),
multiple = "all")
### Labelled data frame creation
# List of variable names
legend <- df_final.temp2 %>%
colnames() %>%
as.data.frame()
### Assigning labels
df_final.temp3 <- df_final.temp2 %>%
expss::apply_labels(year = "Election Cycle",
state_name = "State Name",
state_abv = "State Abbreviation",
fips = "State's Federal Information Processing System (FIPS) code",
region = "State's census bureau region",
division = "State's census bureau division",
area = "Area in square miles",
lat = "Center latitudinal coordinate",
long = "Center longitudinal coordinate",
redistrict_VAR = "Binary variable of did redistricting occur in this election cycle?",
court_action_none_count = "No. of redistricting actions in an election cycle without court action/involvement",
court_map_drawn_count = "No. of redistricting actions in an election cycle, where the court drew the final map",
court_return_leg_count = "No. of redistricting actions in an election cycle, where the court asked the legislature to redraw the map",
court_challenge_rejected_count = "No. of redistricting actions in an election cycle, where the court rejected the challenge (map was fair)",
avg_DEMvote_perc = "Average % of votes cast to DEM candiates across counties",
avg_REPvote_perc = "Average % of votes cast to REP candiates across counties",
avg_OTHERvote_perc = "Average % of votes cast to non-DEM/REP candiates across counties",
state_totalvotes = "Total votes cast in a state",
vep_turnout_rate = "Voting Eligible Population (VEP) turnout rate",
vap_turnout_rate = "Voting Able Population (VAP) turnout rate",
vep = "Voting Eligible Population (VEP)",
vap = "Voting Able Population (VAP)",
violent_crime = "No. of violent crimes reported in a state",
polling_station = "Number of polling stations per state [Note: exists from 2012 - 2020 only]",
state_laborForce = "No. of people in state's laborforce",
state_employed = "No. of employed people in the state",
state_unemployed = "No. of employed people in the state",
state_unemploymentRate = "State's unemployment rate",
gdp_state = "State's real GDP",
wealth_gini = "State-level GINI coefficient (measure of income inequality)",
income_mean = "State-level average total household income",
stateparty_control = "Partisan control over state's legislature (controlling both state house and senate)",
vep_density = "Population density based on voting eligible population",
vap_density = "Population density based on voting able population",
year_num = "Election Cycle (numeric version)",
redistrict_VAR_VAR = "Merge check variable [ignore please]",
court_action_none_count_VAR = "Binary variable of was there a redistricting action during the 2012 election cycle, without court action/involvement?",
court_map_drawn_count_VAR = "Binary variable of was there a redistricting action during the 2012 election cycle, where the courts drew the final map?",
court_return_leg_count_VAR = "Binary variable of was there a redistricting action during the 2012 election cycle, where the court asked the legislature to redraw the map?",
court_challenge_rejected_count_VAR = "Binary variable of was there a redistricting action during the 2012 election cycle, where the court rejected the challenge (map was fair)",
judiciary_VAR = "Binary variable of was there redistricting action during the 2012 election cycle, with ANY court action/involvement?",
judiciary_unfair_map_VAR = "Binary variable of was there redistricting action during the 2012 election cycle, with court action/involvement that found the map was unfair (needed to be redrawn)?",
judiciary_fair_map_VAR = "Binary variable of was there redistricting action during the 2012 election cycle, with court action/involvement that found the map was fair (unchanged map)?"
)
### Assign to df_final
df_final <- df_final.temp3
legend <- sjlabelled::get_label(df_final) %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename("label" = ".")
### Save dataset
# write.csv(df_final, file = paste0("04. Outputs/", today(), "_electiondataset.csv"))
saveRDS(df_final, file = paste0("04. Outputs/", today(), "_electiondataset.rds"))
rm(list=ls())
df <- read_rds("04. Outputs/2024-10-08_electiondataset.rds")
View(df)
### Import voter turnout data
### https://election.lab.ufl.edu/dataset/1980-2022-general-election-turnout-rates/
IMPORT.turnout <- read_csv("02. Inputs/Turnout_1980_2022_v1.0.csv")
### Preparing dataframe for merging
df_turnout <- IMPORT.turnout %>%
# Changing percent string to numeric
mutate(across(c(NONCITIZEN_PCT, VEP_TURNOUT_RATE, VAP_TURNOUT_RATE), ~as.numeric(sub("%", "", .)))) %>%
# Removing columns unrelated to voter turnout rate
select(1:3, VEP_TURNOUT_RATE, VAP_TURNOUT_RATE, VEP, VAP) %>%
# Renaming column names to lowercase (for easier merge)
rename_all(tolower)
View(IMPORT.turnout)
### Import house votes
### https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2
IMPORT.housevote <- read_csv("02. Inputs/1976-2022-house.csv")
### Preparing dataframe for merging
df_housevote.temp1 <- IMPORT.housevote %>%
# Only considering Democrat, Republican candidates. Other parties are classified as "OTHER".
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
# Creating wide dataframe
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
# Merging back total votes per district
left_join(IMPORT.housevote %>% select(year, state_po, district, totalvotes) %>% distinct(),
by = join_by("year" == "year", "state_po" == "state_po", "district" == "district")) %>%
# Replacing missing values with 0 (missing values caused by the pivot_wider)
replace(is.na(.), 0) %>%
# Relocating columns to more appropriate locations
relocate(totalvotes, .after = district) %>%
relocate(OTHER, .after = REP) %>%
# Filtering states with total votes <= 1 (which indicate no contestation or NA values)
filter(totalvotes >= 1) %>%
# Converting votes per party into percentage of votes cast per district
mutate(across(c("DEM", "REP", "OTHER"), ~ ./totalvotes , .names = '{col}_perc'))
# Identifying average percentage of votes cast for a party in a state (average across districts)
df_housevote.temp2 <- df_housevote.temp1 %>%
group_by(year, state_po) %>%
summarize(avg_DEMvote_perc = mean(DEM_perc, na.rm = T),
avg_REPvote_perc = mean(REP_perc, na.rm = T),
avg_OTHERvote_perc = mean(OTHER_perc, na.rm = T),
state_totalvotes = sum(totalvotes, na.rm = T))
df_housevote <- df_housevote.temp2
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
View(df_housevote)
# install.packages("here")
# install.packages("tidyverse")
# install.packages("plm")
# install.packages("stargazer")
# install.packages("readxl")
# install.packages("labelled")
# install.packages("sjlabelled")
library(here)
library(tidyverse)
library(plm)
library(stargazer)
library(readxl)
library(labelled)
library(sjlabelled)
### Change directory here.
### As long as file structure is same as github structure, directory does not need to be changed.
knitr::opts_knit$set(root.dir = here::here())
### Clean environment
rm(list=ls())
### Import data created in dataset-creation.rmd
df <- read_rds("04. Outputs/2024-10-08_electiondataset.rds")
### Legend of variables (variable name x explanation of each variable)
legend_df <- sjlabelled::get_label(df) %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename("label" = ".")
### Data without labels (if necessary)
df_nolabel <- labelled::remove_labels(df)
temp.variable_list <- c("court_action_none_count_VAR", "court_map_drawn_count_VAR", "court_return_leg_count_VAR", "court_challenge_rejected_count_VAR", "judiciary_VAR", "judiciary_unfair_map_VAR", "judiciary_fair_map_VAR")
temp.year_expression_list <- list(expr(year_num == 2012), expr(year_num >= 2012), expr(TRUE))
for(year.sel in temp.year_expression_list){
print(as_label(year.sel))
for(val in temp.variable_list){
df %>%
filter(!!year.sel) %>%
select(paste0(val)) %>%
table() %>%
print()
}
}
### Cleanwork space
rm(list = grep("temp", ls(), value = TRUE))
### Creating a function to run multiple regressions simultaneously
f.reg.multi <- function(dv.sav = dv,
iv.sav = iv,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL) {
templist <- list()
for (i in 1:length(dv.sav)){
val <- dv.sav[[i]]
formula_str <- paste0(val, "~", iv.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return()
}
### Panel Data Frame for DID
p.df <- df %>%
filter(avg_DEMvote_perc > 0.0001 & avg_REPvote_perc > 0.0001) %>%
# filter(year_num >= 2004 & year_num <= 2016) %>%
mutate(time = case_when(year %in% c("2000", "2004", "2008") ~ 0,
year %in% c("2012", "2016", "2020") ~ 1)) %>%
mutate(stateparty_control = fct_relevel(stateparty_control, "SPLIT", "DEM", "REP")) %>%
mutate(interaction_judiciary = time * judiciary_VAR,
interaction_court_action_none_count = time * court_action_none_count_VAR,
interaction_court_map_drawn_count = time * court_map_drawn_count_VAR,
interaction_court_return_leg_count = time * court_return_leg_count_VAR,
interaction_court_challenge_rejected_count = time * court_challenge_rejected_count_VAR,
interaction_judiciary_unfair = time * judiciary_unfair_map_VAR,
interaction_judiciary_fair = time * judiciary_fair_map_VAR
) %>%
pdata.frame(index = c("state_abv", "year"))
### Legend of variables (variable name x explanation of each variable)
legend_p.df <- sjlabelled::get_label(p.df) %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename("label" = ".")
# Data-check for DID
table(p.df$time)
table(p.df$judiciary_VAR)
table(p.df$judiciary_VAR[p.df$time == 1])
table(p.df$judiciary_VAR[p.df$time == 0])
table(p.df$interaction_judiciary)
### Judiciary involvement (fair map) in redistricting (time and state fixed effects)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)", "Voting-Eligible-Population turnout rate (log)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = NULL,
title.sav = "",
effect.sav = "twoways",
type.sav = "within"
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
# Using state fixed effect (individual) under PLM, but manually adding time control variables
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = NULL,
title.sav = "",
effect.sav = "individual",
type.sav = "within"
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (manual).html")
)
View(legend_p.df)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)", "Voting-Eligible-Population turnout rate (log)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + log(wealth_gini) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = NULL,
title.sav = "",
effect.sav = "twoways",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)", "Voting-Eligible-Population turnout rate (log)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + log(wealth_gini) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "twoways",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + log(wealth_gini) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "twoways",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + log(wealth_gini) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "individual",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + log(income_mean) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "individual",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "individual",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(income_mean) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "individual",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(wealth_gini) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "individual",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
dv <- c("avg_DEMvote_perc", "avg_REPvote_perc", "log(vep_turnout_rate)")
iv <- "interaction_judiciary_fair + log(vep_density) + log(violent_crime) + log(state_unemploymentRate) + stateparty_control + as.factor(year)"
# Using time and state fixed effect (twoways) under PLM
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = NULL, cov_label.sav = NULL,
title.sav = "",
effect.sav = "individual",
type.sav = "within"
# , star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "/reg-tbl-did-judicial_fair (twoway).html")
)
