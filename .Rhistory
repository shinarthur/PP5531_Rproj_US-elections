select(-'countyName_StateAbbreviation')
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = strsplit(CountyName_StateAbbreviation, ", ")[[1]][1],
state_abv = strsplit(CountyName_StateAbbreviation, ", ")[[1]][2]) %>%
select(-countyName_StateAbbreviation)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = strsplit(CountyName_StateAbbreviation, ", ")[[1]][1],
state_abv = strsplit(CountyName_StateAbbreviation, ", ")[[1]][2])
strsplit(df_unemp$CountyName_StateAbbreviation[1], ", ")
?unlist
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = unlist(strsplit(CountyName_StateAbbreviation, ", "))[1],
state_abv = unlist(strsplit(CountyName_StateAbbreviation, ", "))[2])
unlist(strsplit(CountyName_StateAbbreviation, ", "))
unlist(strsplit(df_unemp$countyName_StateAbbreviation, ", "))
### Import county unemployment rate
### https://www.bls.gov/lau/tables.htm#cntyaa
### Row Binding all Annual County Unemployment Data from 1997 to 2003
# Prepare Files' Paths
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 6, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1:3,6)] %>%
na.omit()
names(file_slice) <- c("countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1],
state_abv = unlist(strsplit(countyName_StateAbbreviation, ", "))[2])
unlist(strsplit(df_unemp$countyName_StateAbbreviation, ", "))
?grep
grep(",\\s(A-Z]{2}")
grep(",\\s(A-Z]{2}", df_unemp$countyName_StateAbbreviation[1])
grep(",\s(A-Z]{2}", df_unemp$countyName_StateAbbreviation[1])
grep(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
grepl(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
sub(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
grepl(",\\s([A-Z]{2})", df_unemp$countyName_StateAbbreviation[1])
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})"), unlist(strsplit(df_unemp$countyName_StateAbbreviation)[2]), "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation)[2]), "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation))[2], "DC"))
?strsplit
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
na.omit()
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"))
unlist(strsplit("asdf", ", "))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC"),
county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
?ungroup
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]))
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the County Name and State Abbreviation into two separate columns
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, " County, "))[1])
?gsub
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
gsub(" County", "", county_name)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
gsub(" County", "", county_name)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
gsub(" County", "",.)
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1]) %>%
ungroup() %>%
```
### Preparing data frame for merging
df4 <- df_unemp %>%
# Split the state abbreviation into a separate column and make exception of District of Columbia
group_by(state_code) %>%
mutate(state_abv = ifelse(grepl(",\\s([A-Z]{2})", countyName_StateAbbreviation), unlist(strsplit(countyName_StateAbbreviation, ", "))[2], "DC")) %>%
ungroup() %>%
# Split the county name into a separate column
group_by(county_code) %>%
mutate(county_name = unlist(strsplit(countyName_StateAbbreviation, ", "))[1])
df4$county_name <- gsub(" County", "", df4$county_name)
df4$county_name
?%in%
library(here)
library(tidyverse)
library(plm)
library(stargazer)
library(readxl)
library(stringi)
### Change directory here. Keep file structure same as sharepoint structure.
knitr::opts_knit$set(root.dir = here::here())
poll_files <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
poll_files
poll_files <- poll_files_all["output" %in% poll_files_all]
# Collate and filter files path
poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
poll_files <- poll_files_all["output" %in% poll_files_all]
?append
append(poll_files, "test")
poll_files <- c()
for (file in poll_files_all){
if("output" %in% file){
poll_files <- append(poll_files, file)
}
}
"output" %in% poll_files_all[767\]
"output" %in% poll_files_all[767]
poll_files_all[767]
grep("output", poll_files_all[767])
grepl("output", poll_files_all[767])
grepl("output", poll_files_all[758])
# Collate and filter files path
poll_files_all <- list.files(path = "02. Inputs/us-polling-places/data", full.names = TRUE, recursive = TRUE)
poll_files <- c()
for (file in poll_files_all){
if(grepl("output", file)){
poll_files <- append(poll_files, file)
}
}
head(poll_files)
tail(poll_files)
test <- read_xlsx(poll_files[1])
test <- read_xlsx(poll_files[2])
test <- read_xlsx(poll_files[1])
test <- read.csv(poll_files[1])
View(test)
test <- read.csv(poll_files[2])
test <- read.csv(poll_files[1])
test <- read.csv(poll_files[3])
test <- read.csv(poll_files[4])
test <- read.csv(poll_files[5])
test <- read.csv(poll_files[10])
?ncoll
?ncol
df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_slice)
}
else{
print("error")
}
}
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print("error")
}
}
unemp_county_files <- list.files(path = "02. Inputs/county_unemployment", full.names = TRUE, recursive = TRUE)
# Prepare empty data frame to catch
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
if(ncol(file_data != 8)){
print(file)
}
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
# Remove NA (Note: there are data entry of "N.A." in character)
na.omit()
# Rename columns
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
if(ncol(file_data != 10)){
print(file)
}
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
# Remove NA (Note: there are data entry of "N.A." in character)
na.omit()
# Rename columns
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
test_ue <- read_xlsx(unemp_county_files[1])
ncol(test_ue)
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
if(ncol(file_data) != 10)){
df_unemp <- data.frame(matrix(ncol = 8, nrow = 0))
# Loop each file into binding
for (file in unemp_county_files) {
# Read xslx file
file_data <- read_xlsx(file)
if(ncol(file_data) != 10){
print(file)
}
# Remove headers and unnecessary columns to match to empty data frame
file_slice <- file_data[-c(1:5),-c(1,6)] %>%
# Remove NA (Note: there are data entry of "N.A." in character)
na.omit()
# Rename columns
names(file_slice) <- c("state_code",
"county_code",
"countyName_StateAbbreviation",
"year",
"laborForce",
"employed",
"unemployed",
"unemploymentRate")
# Rbind
df_unemp <- rbind(df_unemp, file_slice)
}
df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print(file)
print(character(ncol(file_data)))
}
}
character(ncol(file_data))
ncol(file_data)
print(12)
df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print(file)
print(ncol(file_data))
}
}
poll_files <- c()
for (file in poll_files_all){
if(grepl("/output/", file)){
poll_files <- append(poll_files, file)
}
}
df_poll <- data.frame(matrix(ncol = 15, nrow = 0))
# Loop each file into binding
for (file in poll_files) {
# Read csv file
file_data <- read.csv(file)
# Safety check for same number of columns before binding
if (ncol(file_data) == 15){
# Rbind
df_poll <- rbind(df_poll, file_data)
}
else{
print(file)
print(ncol(file_data))
}
}
View(df_poll)
?group_by
?count()
?tally()
str(df_poll$location_type)
unique(df_poll$location_type)
?distinct
df6 <- df_poll %>%
mutate(county_name = str_to_sentence(county_name))
group_by(election_date, county_name) %>%
add.count()
?count
df6 <- df_poll %>%
mutate(county_name = str_to_sentence(county_name))
group_by(election_date, county_name) %>%
add_count()
df6 <- df_poll %>%
mutate(county_name = str_to_sentence(county_name))
group_by(election_date, county_name) %>%
add_count()
group_by()
?group_by
group_by(., election_date, county_name) %>%
add_count() %>%
ungroup() %>%
distinct()
df6 <- df_poll %>%
mutate(county_name = str_to_sentence(county_name))
group_by(., election_date, county_name) %>%
add_count()
df6 <- df_poll %>%
mutate(county_name = str_to_sentence(county_name)) %>%
group_by(election_date, county_name) %>%
add_count()
View(df6)
df6 <- df_poll %>%
mutate(county_name = str_to_sentence(county_name)) %>%
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
select(election_date, county_name, n)
df6 <- df_poll %>%
mutate(county_name = str_to_sentence(county_name)) %>%
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
select(election_date, county_name, n) %>%
distinct()
summary(df6$n)
unique(df_poll$jurisdiction_type)
df6 <- df_poll %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct()
summary(df6$n)
df6 <- df_poll %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name))
which(is.na(df6$county_name), arr.ind = TRUE)
df_poll$jurisdiction[2315]
?filter
df6 <- df_poll %>%
# filter out jurisdiction with no names (they could be precinct)
filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name))
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct()
View(df6)
summary(df6$n)
df6 <- df_poll %>%
# filter out jurisdiction with no names (they are likely precincts)
#filter(jurisdiction != "") %>%
# replace county name with jurisdiction name when jurisdiction type is not county and county name is NA
mutate(county_name = if_else(jurisdiction_type != "county" & is.na(county_name), jurisdiction, county_name)) %>%
# Harmonise cases
mutate(county_name = str_to_sentence(county_name)) %>%
# Tally by election date for each county
group_by(election_date, county_name) %>%
add_count() %>%
ungroup() %>%
# drop all unneeded columns
select(election_date, county_name, n) %>%
# keep unique rows
distinct()
sum(df6$n)
35098+28836+24012+16516
