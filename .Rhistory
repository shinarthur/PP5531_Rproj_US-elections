# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2016.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
### DID for pre-2020 and post-2020
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008", "2012", "2016") ~ 0,
year %in% c("2020") ~ 1))
### WITH polling data results
dv <- c("log(democrat_county_vote_perc)", "log(republican_county_vote_perc)")
iv <- "redistrict_count + time + redistrict_count:time + log(polling_station) + log(vep_turnout_rate) + log(unemploymentRate) + state_party_control"
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)")
cov_label <- c("Redistricting attempts per election cycle [state-level]",
"Polling station per county (log)",
"Voting-Eligible-Population turnout rate (log) [state-level]",
"Unemployment rate  (log) [county-level]",
"State legislature control - DEM",
"State legislature control - REP")
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2020.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
### DID for pre-2016 and post-2016
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008", "2012") ~ 0,
year %in% c("2016", "2020") ~ 1))
### WITH polling data results
dv <- c("log(democrat_county_vote_perc)", "log(republican_county_vote_perc)")
iv <- "redistrict_count + time + redistrict_count:time + log(polling_station) + log(vep_turnout_rate) + log(unemploymentRate) + state_party_control"
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)")
cov_label <- c("Redistricting attempts per election cycle [state-level]",
"T",
"Interaction (Redistrict x T)",
"Polling station per county (log)",
"Voting-Eligible-Population turnout rate (log) [state-level]",
"Unemployment rate  (log) [county-level]",
"State legislature control - DEM",
"State legislature control - REP")
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2016.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
### DID for pre-2020 and post-2020
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008", "2012", "2016") ~ 0,
year %in% c("2020") ~ 1))
### WITH polling data results
dv <- c("log(democrat_county_vote_perc)", "log(republican_county_vote_perc)")
iv <- "redistrict_count + time + redistrict_count:time + log(polling_station) + log(vep_turnout_rate) + log(unemploymentRate) + state_party_control"
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)")
cov_label <- c("Redistricting attempts per election cycle [state-level]",
"T",
"Interaction (Redistrict x T)",
"Polling station per county (log)",
"Voting-Eligible-Population turnout rate (log) [state-level]",
"Unemployment rate  (log) [county-level]",
"State legislature control - DEM",
"State legislature control - REP")
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2020.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
View(p.df)
### DID for pre-2020 and post-2020
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008", "2012", "2016") ~ 0,
year %in% c("2020") ~ 1))
### WITH polling data results
dv <- c("log(democrat_county_vote_perc)", "log(republican_county_vote_perc)")
iv <- "redistrict_count + time + redistrict_count:time + log(polling_station) + log(vep_turnout_rate) + log(unemploymentRate) + state_party_control"
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)")
cov_label <- c("Redistricting attempts per election cycle [state-level]",
"T",
"Interaction (Redistrict x T)",
"Polling station per county (log)",
"Voting-Eligible-Population turnout rate (log) [state-level]",
"Unemployment rate  (log) [county-level]",
"State legislature control - DEM",
"State legislature control - REP")
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2020.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008") ~ 0,
year %in% c("2020", "2012", "2016") ~ 1))
### WITH polling data results
dv <- c("log(democrat_county_vote_perc)", "log(republican_county_vote_perc)")
iv <- "redistrict_count + time + redistrict_count:time + log(polling_station) + log(vep_turnout_rate) + log(unemploymentRate) + state_party_control"
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)")
cov_label <- c("Redistricting attempts per election cycle [state-level]",
"T",
"Interaction (Redistrict x T)",
"Polling station per county (log)",
"Voting-Eligible-Population turnout rate (log) [state-level]",
"Unemployment rate  (log) [county-level]",
"State legislature control - DEM",
"State legislature control - REP")
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did-placebo.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
typeof(p.df$redistrict_count)
typeof(p.df$time)
typeof(p.df$time:p.df$redistrict_count)
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008", "2012", "2016") ~ 0,
year %in% c("2020") ~ 1),
interaction = time * redistrict_count)
### WITH polling data results
dv <- c("log(democrat_county_vote_perc)", "log(republican_county_vote_perc)")
iv <- "redistrict_count + time + interaction + log(polling_station) + log(vep_turnout_rate) + log(unemploymentRate) + state_party_control"
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)")
cov_label <- c("Redistricting attempts per election cycle [state-level]",
"T",
"Interaction (Redistrict x T)",
"Polling station per county (log)",
"Voting-Eligible-Population turnout rate (log) [state-level]",
"Unemployment rate  (log) [county-level]",
"State legislature control - DEM",
"State legislature control - REP")
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2020.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
rm(list=ls())
df <- read_rds("04. Outputs/2024-09-26_electiondataset.rds")
legend <- df %>%
colnames() %>%
as.data.frame()
### DID for pre-2020 and post-2020
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008", "2012", "2016") ~ 0,
year %in% c("2020") ~ 1),
interaction = time * redistrict_count)
### WITH polling data results
dv <- c("log(democrat_county_vote_perc)", "log(republican_county_vote_perc)")
iv <- "redistrict_count + time + interaction + log(polling_station) + log(vep_turnout_rate) + log(unemploymentRate) + state_party_control"
dv_label <- c("DEM candidate's % of county votes (log)", "REP candidate's % of county votes (log)")
cov_label <- c("Redistricting attempts per election cycle [state-level]",
"T",
"Interaction (Redistrict x T)",
"Polling station per county (log)",
"Voting-Eligible-Population turnout rate (log) [state-level]",
"Unemployment rate  (log) [county-level]",
"State legislature control - DEM",
"State legislature control - REP")
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2020.html")
)
### Creating a function to run multiple regressions simultaneously
f.reg.multi <- function(dv.sav = dv,
iv.sav = iv,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL) {
templist <- list()
for (i in 1:length(dv.sav)){
val <- dv.sav[[i]]
formula_str <- paste0(val, "~", iv.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav,
effect = effect.sav,
model = type.sav)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return()
}
# Title = Effect of Redistricting on Party Choice in Presidential Elections
f.reg.multi(dv.sav = dv, iv.sav = iv,
dv_label.sav = dv_label, cov_label.sav = cov_label,
title.sav = ""
, star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-polling-did2020.html")
)
# Check N & T
summary(plm(as.formula(paste0(dv, "~", iv)),
data = p.df,
effect = "time",
model = "within"))
table(p.df$interaction)
### DID for pre-2016 and post-2016
p.df <- df %>%
pdata.frame(index = c("idkey", "year")) %>%
mutate(democrat_county_vote_perc = democrat_county_vote / county_totalvotes,
republican_county_vote_perc = republican_county_vote / county_totalvotes,
poll_perc =  polling_station / laborForce,
state_party_control = factor(state_party_control, levels = c("Split", "Democratic", "Republican")),
time = case_when(year %in% c("2000", "2004", "2008", "2012") ~ 0,
year %in% c("2016", "2020") ~ 1),
interaction = time * redistrict_count)
table(p.df$interaction)
library(here)
library(tidyverse)
library(stringi)
### Change directory here.
### As long as file structure is same as github structure, directory does not need to be changed.
knitr::opts_knit$set(root.dir = here::here())
### Clean workspace
rm(list=ls())
### Import house votes
### https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2
df_housevote <- read_csv("02. Inputs/1976-2022-house.csv")
head(df_housevote)
View(df_housevote)
df_housevote %>%
mutate(party2 = case_when(party = "DEMOCRAT" ~ "DEM",
party = "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
head()
df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
View()
df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes)) %>%
head()
df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
totalvotes = totalvotes) %>%
head()
df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
totalvotes = totalvotes) %>%
relocate(totalvotes, .after = district) %>%
pivot_wider(!1:4,
names_from = party2,
values_from = party_vote) %>%
head()
?pivot_wider()
df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
totalvotes = totalvotes) %>%
relocate(totalvotes, .after = district) %>%
pivot_wider(id_cols = 1:4,
names_from = party2,
values_from = party_vote) %>%
head()
>summarize()
?summarize()
df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
totalvotes = totalvotes,
.groups = "drop") %>%
relocate(totalvotes, .after = district)
df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
totalvotes = totalvotes,
.groups = "drop") %>%
relocate(totalvotes, .after = district) %>%
pivot_wider(id_cols = 1:4,
names_from = party2,
values_from = party_vote) %>%
head()
?pivot_wider()
df_housevote %>%
dplyr::summarise(n = dplyr::n(), .by = c(year, state_po, district, totalvotes, party2)) |>
dplyr::filter(n > 1L)
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
totalvotes = totalvotes,
.groups = "drop") %>%
relocate(totalvotes, .after = district)
df_housevote.temp1 %>%
dplyr::summarise(n = dplyr::n(), .by = c(year, state_po, district, totalvotes, party2)) |>
dplyr::filter(n > 1L)
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
# totalvotes = totalvotes,
.groups = "drop") %>%
relocate(totalvotes, .after = district)
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
# totalvotes = totalvotes,
.groups = "drop")
df_housevote.temp1 %>%
dplyr::summarise(n = dplyr::n(), .by = c(year, state_po, district, totalvotes, party2)) |>
dplyr::filter(n > 1L)
df_housevote.temp1 %>%
dplyr::summarise(n = dplyr::n(), .by = c(year, state_po, district, party2)) |>
dplyr::filter(n > 1L)
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
head()
View(df_housevote.temp1)
?left_join
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
left_join(df_housevote %>% select(year, state_po, district, totalvotes),
by = join_by(c("year", "state_po", "district")))
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
left_join(df_housevote %>% select(year, state_po, district, totalvotes),
by = join_by(c("year" == "year", "state_po" == "state_po", "district" == "district")))
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
left_join(df_housevote %>% select(year, state_po, district, totalvotes),
by = join_by("year" == "year", "state_po" == "state_po", "district" == "district"))
View(df_housevote.temp1)
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
left_join(df_housevote %>% select(year, state_po, district, totalvotes),
by = join_by("year" == "year", "state_po" == "state_po", "district" == "district")) %>%
replace(is.na(.), 0)
View(df_housevote.temp1)
df_housevote.temp1 <- df_housevote %>%
mutate(party2 = case_when(party == "DEMOCRAT" ~ "DEM",
party == "REPUBLICAN" ~ "REP",
TRUE ~ "OTHER")) %>%
group_by(year, state_po, district, party2) %>%
summarize(party_vote = sum(candidatevotes),
.groups = "drop") %>%
pivot_wider(id_cols = 1:3,
names_from = party2,
values_from = party_vote) %>%
left_join(df_housevote %>% select(year, state_po, district, totalvotes),
by = join_by("year" == "year", "state_po" == "state_po", "district" == "district")) %>%
replace(is.na(.), 0) %>%
relocate(totalvotes, .after = district) %>%
relocate(OTHER, .after = REP)
View(df_housevote.temp1)
