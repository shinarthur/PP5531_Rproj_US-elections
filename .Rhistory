# star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.html"),
# star.type = "latex",
# star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.tex"),
out.sav = F)
# outputs <- list()
#
# outputs <- f.reg.multi.iv(dv.sav = dv,
#                iv.sav = iv,
#                ctrl.sav = ctrl,
#                dataframe.sav = p.df,
#                title.sav = "testingasdf",
#                effect.sav = "twoways",
#                type.sav = "within",
#                dv_label.sav = NULL, cov_label.sav = NULL,
#                star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
#                star.out = NULL,
#                out.sav = T)
# out.df <- data.frame()
#
# for (i in 1:length(outputs)){
#   temp <- outputs[[i]] %>%
#     tidy() %>%
#     mutate(model = i)
#   out.df <- rbind(out.df, temp)
# }
# ggcoef(outputs[[4]],
#        conf.int = T,
#        conf.level = 0.90,
#        exclude_intercept = T
#        )
dv <- "log(vep_turnout_rate)"
iv <- c("interaction_court_action_none_count", "interaction_judiciary",  "interaction_judiciary_unfair", "interaction_judiciary_fair")
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness) + factor(redistrict_VAR_VAR)"
dv_label <- c("Model A", "Model B", "Model C", "Model D")
cov_label <- c("Interaction (NO Court Involvement X Time)",
"Interaction (ANY Court Involvement X Time)",
"Interaction (Court Finding: UNCONSTITUTIONAL Map X Time)",
"Interaction (Court Finding: CONSTITUTIONAL Map X Time)",
"Voter Population Density (Logged)",
"State Unemployment Rate  (Logged)",
"State legislature control - DEM",
"State legislature control - REP",
"Vote Closeness of Candidates (Logged)",
"Prev. General Election VEP Turnout Rate (Logged)"
)
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "Voting Eligible Population (VEP) Turnout Rate (Logged)",
effect.sav = "twoways",
type.sav = "within",
# dv_label.sav = dv_label, cov_label.sav = cov_label,
# star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.html"),
# star.type = "latex",
# star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.tex"),
out.sav = F)
# outputs <- list()
#
# outputs <- f.reg.multi.iv(dv.sav = dv,
#                iv.sav = iv,
#                ctrl.sav = ctrl,
#                dataframe.sav = p.df,
#                title.sav = "testingasdf",
#                effect.sav = "twoways",
#                type.sav = "within",
#                dv_label.sav = NULL, cov_label.sav = NULL,
#                star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
#                star.out = NULL,
#                out.sav = T)
# out.df <- data.frame()
#
# for (i in 1:length(outputs)){
#   temp <- outputs[[i]] %>%
#     tidy() %>%
#     mutate(model = i)
#   out.df <- rbind(out.df, temp)
# }
# ggcoef(outputs[[4]],
#        conf.int = T,
#        conf.level = 0.90,
#        exclude_intercept = T
#        )
dv <- "log(vep_turnout_rate)"
iv <- c("interaction_court_action_none_count", "interaction_judiciary",  "interaction_judiciary_unfair", "interaction_judiciary_fair")
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness)"
dv_label <- c("Model A", "Model B", "Model C", "Model D")
cov_label <- c("Interaction (NO Court Involvement X Time)",
"Interaction (ANY Court Involvement X Time)",
"Interaction (Court Finding: UNCONSTITUTIONAL Map X Time)",
"Interaction (Court Finding: CONSTITUTIONAL Map X Time)",
"Voter Population Density (Logged)",
"State Unemployment Rate  (Logged)",
"State legislature control - DEM",
"State legislature control - REP",
"Vote Closeness of Candidates (Logged)",
"Prev. General Election VEP Turnout Rate (Logged)"
)
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "Voting Eligible Population (VEP) Turnout Rate (Logged)",
effect.sav = "twoways",
type.sav = "within",
# dv_label.sav = dv_label, cov_label.sav = cov_label,
# star.type = "html",
# star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.html"),
# star.type = "latex",
# star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.tex"),
out.sav = F)
# outputs <- list()
#
# outputs <- f.reg.multi.iv(dv.sav = dv,
#                iv.sav = iv,
#                ctrl.sav = ctrl,
#                dataframe.sav = p.df,
#                title.sav = "testingasdf",
#                effect.sav = "twoways",
#                type.sav = "within",
#                dv_label.sav = NULL, cov_label.sav = NULL,
#                star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
#                star.out = NULL,
#                out.sav = T)
# out.df <- data.frame()
#
# for (i in 1:length(outputs)){
#   temp <- outputs[[i]] %>%
#     tidy() %>%
#     mutate(model = i)
#   out.df <- rbind(out.df, temp)
# }
# ggcoef(outputs[[4]],
#        conf.int = T,
#        conf.level = 0.90,
#        exclude_intercept = T
#        )
dv <- "log(vep_turnout_rate)"
iv <- c("interaction_court_action_none_count", "interaction_judiciary",  "interaction_judiciary_unfair", "interaction_judiciary_fair")
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness)"
dv_label <- c("Model A", "Model B", "Model C", "Model D")
cov_label <- c("Interaction (NO Court Involvement X Time)",
"Interaction (ANY Court Involvement X Time)",
"Interaction (Court Finding: UNCONSTITUTIONAL Map X Time)",
"Interaction (Court Finding: CONSTITUTIONAL Map X Time)",
"Voter Population Density (Logged)",
"State Unemployment Rate  (Logged)",
"State legislature control - DEM",
"State legislature control - REP",
"Vote Closeness of Candidates (Logged)",
"Prev. General Election VEP Turnout Rate (Logged)"
)
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "Voting Eligible Population (VEP) Turnout Rate (Logged)",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = dv_label, cov_label.sav = cov_label,
star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.html"),
out.sav = F)
# outputs <- list()
#
# outputs <- f.reg.multi.iv(dv.sav = dv,
#                iv.sav = iv,
#                ctrl.sav = ctrl,
#                dataframe.sav = p.df,
#                title.sav = "testingasdf",
#                effect.sav = "twoways",
#                type.sav = "within",
#                dv_label.sav = NULL, cov_label.sav = NULL,
#                star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
#                star.out = NULL,
#                out.sav = T)
# out.df <- data.frame()
#
# for (i in 1:length(outputs)){
#   temp <- outputs[[i]] %>%
#     tidy() %>%
#     mutate(model = i)
#   out.df <- rbind(out.df, temp)
# }
# ggcoef(outputs[[4]],
#        conf.int = T,
#        conf.level = 0.90,
#        exclude_intercept = T
#        )
### Creating a function to run multiple regressions simultaneously
f.reg.multi <- function(dv.sav = dv,
iv.sav = iv,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL) {
templist <- list()
for (i in 1:length(dv.sav)){
val <- dv.sav[[i]]
formula_str <- paste0(val, "~", iv.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
# column.sep.width = "0pt",
float = FALSE,
header = FALSE,
# no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav
) %>%
return()
}
f.reg.multi.iv <- function(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "testingasdf",
effect.sav = "time",
type.sav = "within",
dv_label.sav = NULL,
cov_label.sav = NULL,
index.sav = NULL,
star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
star.out = NULL,
out.sav = boolean()) {
templist <- list()
for (i in 1:length(iv.sav)){
val <- iv.sav[[i]]
formula_str <- paste0(dv.sav, "~", val, "+", ctrl.sav)
templist[[i]] <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav
, effect = effect.sav,
model = type.sav
, index = index.sav
)
}
if (out.sav == T) {
return(templist)
}
stargazer(templist,
type = star.type,
out = star.out,
report = "vc*sp",
title = "asdf",
dep.var.labels = paste0(title.sav),
dep.var.labels.include = T,
column.sep.width = "0pt",
float = FALSE,
header = FALSE,
no.space = TRUE,
font.size = "small",
column.labels = dv_label.sav,
covariate.labels = cov_label.sav,
model.numbers = F
) %>%
return()
}
dv <- "log(vep_turnout_rate)"
iv <- c("interaction_court_action_none_count", "interaction_judiciary",  "interaction_judiciary_unfair", "interaction_judiciary_fair")
ctrl <- "log(vep_density) + log(state_unemploymentRate) + stateparty_control + log(lagged_vep) + log(vote_closeness)"
dv_label <- c("Model A", "Model B", "Model C", "Model D")
cov_label <- c("Interaction (NO Court Involvement X Time)",
"Interaction (ANY Court Involvement X Time)",
"Interaction (Court Finding: UNCONSTITUTIONAL Map X Time)",
"Interaction (Court Finding: CONSTITUTIONAL Map X Time)",
"Voter Population Density (Logged)",
"State Unemployment Rate  (Logged)",
"State legislature control - DEM",
"State legislature control - REP",
"Vote Closeness of Candidates (Logged)",
"Prev. General Election VEP Turnout Rate (Logged)"
)
f.reg.multi.iv(dv.sav = dv,
iv.sav = iv,
ctrl.sav = ctrl,
dataframe.sav = p.df,
title.sav = "Voting Eligible Population (VEP) Turnout Rate (Logged)",
effect.sav = "twoways",
type.sav = "within",
dv_label.sav = dv_label, cov_label.sav = cov_label,
star.type = "html",
star.out = paste0("05. Visualizations/", today(), "-regression-tbl-did.html"),
out.sav = F)
# outputs <- list()
#
# outputs <- f.reg.multi.iv(dv.sav = dv,
#                iv.sav = iv,
#                ctrl.sav = ctrl,
#                dataframe.sav = p.df,
#                title.sav = "testingasdf",
#                effect.sav = "twoways",
#                type.sav = "within",
#                dv_label.sav = NULL, cov_label.sav = NULL,
#                star.type = ifelse(knitr::is_latex_output(),"latex", "text"),
#                star.out = NULL,
#                out.sav = T)
# out.df <- data.frame()
#
# for (i in 1:length(outputs)){
#   temp <- outputs[[i]] %>%
#     tidy() %>%
#     mutate(model = i)
#   out.df <- rbind(out.df, temp)
# }
# ggcoef(outputs[[4]],
#        conf.int = T,
#        conf.level = 0.90,
#        exclude_intercept = T
#        )
ggplot(t_test_results, aes(x = as.numeric(year), y = diff)) +
geom_point() +
geom_vline(xintercept = 2010, linetype = 2, alpha = 0.4) +
geom_hline(yintercept = 0, linetype = 1, alpha = 0.7, colour = "red") +
geom_line() +
geom_errorbar(aes(ymin = cimin, ymax = cimax), width = 0.2) +
scale_y_continuous(limits = c(-2, 2), breaks = c(-1,0,1))+
#scale_x_discrete(limits = c(-5,-4,-3,-2,-1,0,1,2,3,4,5)) +
labs(x = "Year", y = "Difference in Means (Turnout Rate)",
title = "Redistriction : T-Test Difference in Means") +
theme_minimal()
# basic R packages
library(here)
library(tidyverse)
library(readr)
library(dplyr)
# ggplot packages
library(ggplot2)
library(RColorBrewer)
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(showtext)
library(ggpmisc)
sysfonts::font_add_google("Roboto Condensed")
showtext_auto()
# geospatial packages
library(maps)
library(usmap)
# regression / coefplot packages
library(plm)
library(broom)
library(dotwhisker)
### Change directory here.
### As long as file structure is same as github structure, directory does not need to be changed.
knitr::opts_knit$set(root.dir = here::here())
rm(list=ls())
### Import election dataset
df <- read_rds("04. Outputs/2024-10-09_electiondataset.rds")
legend <- df %>%
colnames() %>%
as.data.frame()
### Import factiva search data
IMPORT.factiva <- read.csv("04. Outputs/FactivaGerrymandering.csv", header = FALSE, stringsAsFactors = FALSE)
df_factiva <- IMPORT.factiva %>%
filter(grepl("Start Date", V1)) %>%
mutate(Year = as.numeric(gsub(".*(\\d{4}).*", "\\1", V1)),  # Extract the start year
Document_Count = as.numeric(V2)) %>% # Convert document count to numeric %>%
filter(!is.na(Year), !is.na(Document_Count)) # Remove rows with missing data (if any)
### Import regression p dataframe
p.df <- read_rds("04. Outputs/2024-10-13_regressionDF.rds")
format <- theme_ipsum_rc(base_size = 30)+
theme(plot.title = element_text(size = 50, lineheight = 0.55),
plot.subtitle = element_text(size = 30, color = "#939198"),
axis.title.x = element_text(size = 30, hjust = 0.5),
axis.title.y = element_text(size = 30, hjust = 0.5),
axis.text = element_text(lineheight = 0.55),
legend.position = "none",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.caption = element_text(size = 30, hjust=0)
# axis.text.x = element_blank(),
# panel.background = element_blank()
)
format2 <- theme_ipsum_rc(base_size = 30)+
theme(plot.title = element_text(size = 50, lineheight = 0.55, hjust = 0.5),
plot.subtitle = element_text(size = 30, color = "#939198", hjust = 0.5),
axis.title.x = element_text(size = 30, hjust = 0.5),
axis.title.y = element_text(size = 30, hjust = 0.5),
axis.text = element_text(lineheight = 0.55),
plot.caption = element_text(size = 30, hjust=0),
legend.title = element_blank()
)
f.ggsave <- function(name = "asdf", width.sav = 16, height.sav = 9, dpi.sav = 150, output.type = "png"){
filepath <- paste0("05. Visualizations/", name, "_", today(), ".", output.type)
ggsave(filepath, width = width.sav, height = height.sav, units = "in", dpi = dpi.sav)
# print(filepath)
}
f.tidy.reg <- function(dv.sav = dv, iv.sav = iv, ctrl.sav = ctrl,
dataframe.sav = p.df,
effect.sav = "twoways",
model.sav = "within"){
formula_str <- paste0(dv.sav, "~", iv.sav, "+", ctrl.sav)
out <- plm(as.formula(paste(formula_str, collapse = " ")),
data = dataframe.sav, effect = effect.sav, model = model.sav)
tidyout.coef <- tidy(out, conf.int = TRUE, conf.level = 0.9)
tidyout.fitted <- fitted(out)
tidyout.resid <- resid(out)
tidyout <- list(tidyout.coef, tidyout.fitted, tidyout.resid)
return(tidyout)
}
# Create the bar chart with the YlOrRd color palette
df_factiva %>%
ggplot(aes(x = Year, y = Document_Count)) +
geom_bar(stat = "identity", fill = brewer.pal(9, "YlOrRd")[5]) +  # Use a specific shade from YlOrRd
labs(title = "Trend in Articles Mentioning 'Gerrymandering'",
x = "\nYear",
y = "Number of Articles\n",
subtitle = "Source: Factiva search") +
scale_y_continuous(labels = scales::comma_format()) +
format
# Save visualization
f.ggsave(name = "FactivaViz",
width.sav = 12,
height.sav = 8,
output.type = "jpg")
### Preparing data
# Filter data for 2012 and ensure state_abv is character type
df_2012 <- df %>%
filter(year == 2012) %>%
mutate(state_abv = as.character(state_abv)) %>%
select(state_abv, court_action_none_count_VAR,
court_map_drawn_count_VAR, court_return_leg_count_VAR,
court_challenge_rejected_count_VAR)
# Create a new column that categorizes states based on court action
df_2012 <- df_2012 %>%
mutate(court_combined_VAR = case_when(
court_challenge_rejected_count_VAR > 0 ~ "Court finding: Constitutional map  ",
court_return_leg_count_VAR > 0 ~ "Court finding: Unconstitutional map  ",
court_map_drawn_count_VAR > 0 ~ "Court finding: Unconstitutional map  ",
court_action_none_count_VAR > 0 ~ "Redistricting with no court involvement  ",
TRUE ~ "No redistricting  "
)) %>%
mutate(court_combined_VAR = factor(court_combined_VAR,
levels = c("No redistricting  ",
"Redistricting with no court involvement  ",
"Court finding: Constitutional map  ",
"Court finding: Unconstitutional map  "
)))
# Map state abbreviations to full state names for usmap
state_abbreviations <- data.frame(
state_abv = c(state.abb, "DC"),
state = c(state.name, "District of Columbia")
)
# Join the full state names to the data
df_2012 <- df_2012 %>%
left_join(state_abbreviations, by = "state_abv")
### Define a color palette using RColorBrewer (YlOrRd)
color_palette <- brewer.pal(n = 5, name = "YlOrRd")
category_colors <- c("Court finding: Unconstitutional map  " = color_palette[5],  # Deep Red
# "Returned to Legislature" = color_palette[4],  # Orange-Red
"Court finding: Constitutional map  " = color_palette[3],  # Orange
"Redistricting with no court involvement  " = color_palette[2],  # Light Orange-Yellow
"No redistricting  " = "white")  # White for None
category_colors <- c("Court finding: Unconstitutional map  " = "#FF687F",
"Court finding: Constitutional map  " = "#005E8A",
"Redistricting with no court involvement  " = "#FFB188",
"No redistricting  " = "#D3D4D6")
### Plot using usmap (now with full state names)
plot_usmap(data = df_2012, values = "court_combined_VAR", regions = "states"
, color = NULL) +
scale_fill_manual(values = category_colors, name = "Type of Court Action") +
labs(title = "\nTypes of Court Involvement in State Redistricting \nDuring the 2012 Election Cycle",
subtitle = "\n" ) +
theme(legend.position = "top",  # Move the legend to the bottom
plot.title = element_text(hjust = 0.5, size = 50, family = "Roboto Condensed", face = "bold", lineheight = 0.55),  # Center the title
# legend.title = element_text(size = 12, family = "Roboto Condensed", face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 20, family = "Roboto Condensed"),
legend.key.size = unit(0.5, "cm"))
# guides(fill = guide_legend(
#   title.position = "top",  # Place the legend title above the categories
#   title.hjust = 0.5,  # Center the legend title
#   nrow = 1  # Place categories in a single row
# ))
# Save visualization
f.ggsave(name = "MapViz", width.sav = 12, height.sav = 8,
output.type = "jpg")
### Plot using usmap (now with full state names)
plot_usmap(data = df_2012, values = "court_combined_VAR", regions = "states"
, color = "white") +
scale_fill_manual(values = category_colors, name = "Type of Court Action") +
labs(title = "\nTypes of Court Involvement in State Redistricting \nDuring the 2012 Election Cycle",
subtitle = "\n" ) +
theme(legend.position = "top",  # Move the legend to the bottom
plot.title = element_text(hjust = 0.5, size = 50, family = "Roboto Condensed", face = "bold", lineheight = 0.55),  # Center the title
# legend.title = element_text(size = 12, family = "Roboto Condensed", face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 20, family = "Roboto Condensed"),
legend.key.size = unit(0.5, "cm"))
# Save visualization
f.ggsave(name = "MapViz", width.sav = 12, height.sav = 8,
output.type = "jpg")
